@page "/todo"
@using Microsoft.AspNetCore.Components
@using Grains
@using TozawaNGO.Services
@inherits ComponentBase
@inject TodoService TodoService
@implements IDisposable

<h1>Todo (@todos.Count(todo => !todo.IsDone))</h1>

@foreach (var todo in todos)
{
   <div class="input-groupmb-3">
        <div class="input-group-prepend">
            <div class="input-group-text">
                <input type="checkbox" checked="@todo.IsDone" @onchange="@(args => HandleTodoDoneAsync(args,todo))"/>
            </div>
            <button class="btnbtn-outline-secondary" type="button" @onclick="@(args => HandleDeleteTodoAsync(todo))">
                <span class="oioi-trash" aria-hidden="true"></span>
                </button>
                </div>
                <input class="form-control" value="@todo.Title" @onchange="@(args => HandleTodoTitleChangeAsync(args,todo))"/>
                </div>
}
<input placeholder="Somethingtodo" @bind-value="@newTodo"/>
<button @onclick="@(args=>AddTodoAsync())">AddTodo</button>

@code {

    private Guid ownerKey = Guid.Empty;
    private TodoKeyedCollection todos = new TodoKeyedCollection();
    private string newTodo;
    private Orleans.Streams.StreamSubscriptionHandle<TodoNotification> subscription;

    protected override async Task OnInitializedAsync()
    {
        subscription = await TodoService.SubscribeAsync(ownerKey, notification => InvokeAsync(() => HandleNotificationAsync(notification)));
        foreach (var item in await TodoService.GetAllAsync(ownerKey))
        {
            todos.Add(item);
        }

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        try
        {
            subscription?.UnsubscribeAsync();
        }
        catch
        {
        }
    }

    private async Task AddTodoAsync()
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            var todo = new TodoItem(Guid.NewGuid(), newTodo, false, ownerKey);
            await TodoService.SetAsync(todo);

            if (todos.TryGetValue(todo.Key, out var current))
            {
                if (todo.Timestamp > current.Timestamp)
                {
                    todos[todos.IndexOf(current)] = todo;
                }
            }
            else
            {
                todos.Add(todo);
            }
            newTodo = null;
        }
    }

    private Task HandleNotificationAsync(TodoNotification notification)
    {
        if (notification.Item == null)
        {
            if (todos.Remove(notification.ItemKey))
            {
                StateHasChanged();
            }
            return Task.CompletedTask;
        }

        if (todos.TryGetValue(notification.Item.Key, out var current))
        {
            if (notification.Item.Timestamp > current.Timestamp)
            {
                todos[todos.IndexOf(current)] = notification.Item;
                StateHasChanged();
            }
            return Task.CompletedTask;
        }

        todos.Add(notification.Item);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void TryUpdateCollection(TodoItem item)
    {
        if (todos.TryGetValue(item.Key, out var current))
        {
            if (item.Timestamp > current.Timestamp)
            {
                todos[todos.IndexOf(current)] = item;
            }
        }
    }

    private async Task HandleTodoDoneAsync(ChangeEventArgs args, TodoItem item)
    {
        bool isDone = (bool)args.Value;
        var updated = item.WithIsDone(isDone);
        await TodoService.SetAsync(updated);
        TryUpdateCollection(updated);
    }

    private async Task HandleTodoTitleChangeAsync(ChangeEventArgs args, TodoItem item)
    {
        string title = (string)args.Value;
        var updated = item.WithTitle(title);
        await TodoService.SetAsync(updated);
        TryUpdateCollection(updated);
    }

    private async Task HandleDeleteTodoAsync(TodoItem item)
    {
        await TodoService.DeleteAsync(item.Key);
        todos.Remove(item.Key);
    }

    private class TodoKeyedCollection : System.Collections.ObjectModel.KeyedCollection<Guid, TodoItem>
    {
        protected override Guid GetKeyForItem(TodoItem item) => item.Key;
    }
}