// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TozawaNGO.MyCompiledModels
{
    public partial class TozawangoDbContextModel
    {
        partial void Initialize()
        {
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);
            var convertedOwner = ConvertedOwnerEntityType.Create(this);
            var fileAttachment = FileAttachmentEntityType.Create(this);
            var ownerFileAttachment = OwnerFileAttachmentEntityType.Create(this);
            var applicationUser = ApplicationUserEntityType.Create(this);
            var establishment = EstablishmentEntityType.Create(this);
            var partner = PartnerEntityType.Create(this);
            var report = ReportEntityType.Create(this);
            var station = StationEntityType.Create(this);
            var translation = TranslationEntityType.Create(this);
            var userHashPwd = UserHashPwdEntityType.Create(this);
            var userLog = UserLogEntityType.Create(this);
            var audit = AuditEntityType.Create(this);

            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, applicationUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, applicationUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, applicationUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, applicationUser);
            OwnerFileAttachmentEntityType.CreateForeignKey1(ownerFileAttachment, fileAttachment);
            ApplicationUserEntityType.CreateForeignKey1(applicationUser, partner);
            EstablishmentEntityType.CreateForeignKey1(establishment, station);
            ReportEntityType.CreateForeignKey1(report, station);
            UserHashPwdEntityType.CreateForeignKey1(userHashPwd, applicationUser);

            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);
            ConvertedOwnerEntityType.CreateAnnotations(convertedOwner);
            FileAttachmentEntityType.CreateAnnotations(fileAttachment);
            OwnerFileAttachmentEntityType.CreateAnnotations(ownerFileAttachment);
            ApplicationUserEntityType.CreateAnnotations(applicationUser);
            EstablishmentEntityType.CreateAnnotations(establishment);
            PartnerEntityType.CreateAnnotations(partner);
            ReportEntityType.CreateAnnotations(report);
            StationEntityType.CreateAnnotations(station);
            TranslationEntityType.CreateAnnotations(translation);
            UserHashPwdEntityType.CreateAnnotations(userHashPwd);
            UserLogEntityType.CreateAnnotations(userLog);
            AuditEntityType.CreateAnnotations(audit);

            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:DefaultSchema", "Authorization");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Name", nameColumnBase);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "nvarchar(256)", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var aspNetRolesTable = new Table("AspNetRoles", "Authorization", relationalModel);
            var idColumn = new Column("Id", "nvarchar(450)", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "nvarchar(max)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var nameColumn = new Column("Name", "nvarchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Name", nameColumn);
            var normalizedNameColumn = new Column("NormalizedName", "nvarchar(256)", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", "Authorization"), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("Id", idColumnBase0);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings0.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings0 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", "Authorization", relationalModel);
            var idColumn0 = new Column("Id", "int", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn0);
            var claimTypeColumn = new Column("ClaimType", "nvarchar(max)", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "nvarchar(max)", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "nvarchar(450)", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn0 });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", "Authorization"), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings0.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("Id", idColumnBase1);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings1.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings1 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", "Authorization", relationalModel);
            var idColumn1 = new Column("Id", "int", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn1);
            var claimTypeColumn0 = new Column("ClaimType", "nvarchar(max)", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "nvarchar(max)", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn = new Column("UserId", "nvarchar(450)", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn1 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", "Authorization"), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings1.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings2.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings2 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", "Authorization", relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "nvarchar(max)", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn0 = new Column("UserId", "nvarchar(450)", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn0);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn0 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", "Authorization"), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings2.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings3.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings3 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", "Authorization", relationalModel);
            var userIdColumn1 = new Column("UserId", "nvarchar(450)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn1);
            var roleIdColumn0 = new Column("RoleId", "nvarchar(450)", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn1, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", "Authorization"), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings3.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Name", nameColumnBase0);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "nvarchar(450)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("UserId", userIdColumnBase2);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "nvarchar(max)", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings4.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings4 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", "Authorization", relationalModel);
            var userIdColumn2 = new Column("UserId", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn2);
            var loginProviderColumn0 = new Column("LoginProvider", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn0 = new Column("Name", "nvarchar(450)", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn0);
            var valueColumn = new Column("Value", "nvarchar(max)", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn2, loginProviderColumn0, nameColumn0 });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", "Authorization"), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings4.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);

            var convertedOwner = FindEntityType("TozawaNGO.Attachment.Models.ConvertedOwner")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            convertedOwner.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var tozawaNGOAttachmentModelsConvertedOwnerTableBase = new TableBase("TozawaNGO.Attachment.Models.ConvertedOwner", null, relationalModel);
            var createdByColumnBase = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAttachmentModelsConvertedOwnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsConvertedOwnerTableBase.Columns.Add("CreatedBy", createdByColumnBase);
            var createdDateColumnBase = new ColumnBase<ColumnMappingBase>("CreatedDate", "datetime2", tozawaNGOAttachmentModelsConvertedOwnerTableBase);
            tozawaNGOAttachmentModelsConvertedOwnerTableBase.Columns.Add("CreatedDate", createdDateColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAttachmentModelsConvertedOwnerTableBase);
            tozawaNGOAttachmentModelsConvertedOwnerTableBase.Columns.Add("Id", idColumnBase2);
            var modifiedByColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAttachmentModelsConvertedOwnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsConvertedOwnerTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase);
            var modifiedDateColumnBase = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAttachmentModelsConvertedOwnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsConvertedOwnerTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase);
            var organizationIdColumnBase = new ColumnBase<ColumnMappingBase>("OrganizationId", "uniqueidentifier", tozawaNGOAttachmentModelsConvertedOwnerTableBase);
            tozawaNGOAttachmentModelsConvertedOwnerTableBase.Columns.Add("OrganizationId", organizationIdColumnBase);
            relationalModel.DefaultTables.Add("TozawaNGO.Attachment.Models.ConvertedOwner", tozawaNGOAttachmentModelsConvertedOwnerTableBase);
            var tozawaNGOAttachmentModelsConvertedOwnerMappingBase = new TableMappingBase<ColumnMappingBase>(convertedOwner, tozawaNGOAttachmentModelsConvertedOwnerTableBase, true);
            tozawaNGOAttachmentModelsConvertedOwnerTableBase.AddTypeMapping(tozawaNGOAttachmentModelsConvertedOwnerMappingBase, false);
            defaultTableMappings5.Add(tozawaNGOAttachmentModelsConvertedOwnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, convertedOwner.FindProperty("Id")!, tozawaNGOAttachmentModelsConvertedOwnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase, convertedOwner.FindProperty("CreatedBy")!, tozawaNGOAttachmentModelsConvertedOwnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdDateColumnBase, convertedOwner.FindProperty("CreatedDate")!, tozawaNGOAttachmentModelsConvertedOwnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase, convertedOwner.FindProperty("ModifiedBy")!, tozawaNGOAttachmentModelsConvertedOwnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase, convertedOwner.FindProperty("ModifiedDate")!, tozawaNGOAttachmentModelsConvertedOwnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)organizationIdColumnBase, convertedOwner.FindProperty("OrganizationId")!, tozawaNGOAttachmentModelsConvertedOwnerMappingBase);

            var tableMappings5 = new List<TableMapping>();
            convertedOwner.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var convertedOwnersTable = new Table("ConvertedOwners", "Authorization", relationalModel);
            var idColumn2 = new Column("Id", "uniqueidentifier", convertedOwnersTable);
            convertedOwnersTable.Columns.Add("Id", idColumn2);
            var createdByColumn = new Column("CreatedBy", "nvarchar(max)", convertedOwnersTable)
            {
                IsNullable = true
            };
            convertedOwnersTable.Columns.Add("CreatedBy", createdByColumn);
            var createdDateColumn = new Column("CreatedDate", "datetime2", convertedOwnersTable);
            convertedOwnersTable.Columns.Add("CreatedDate", createdDateColumn);
            var modifiedByColumn = new Column("ModifiedBy", "nvarchar(max)", convertedOwnersTable)
            {
                IsNullable = true
            };
            convertedOwnersTable.Columns.Add("ModifiedBy", modifiedByColumn);
            var modifiedDateColumn = new Column("ModifiedDate", "datetime2", convertedOwnersTable)
            {
                IsNullable = true
            };
            convertedOwnersTable.Columns.Add("ModifiedDate", modifiedDateColumn);
            var organizationIdColumn = new Column("OrganizationId", "uniqueidentifier", convertedOwnersTable);
            convertedOwnersTable.Columns.Add("OrganizationId", organizationIdColumn);
            var pK_ConvertedOwners = new UniqueConstraint("PK_ConvertedOwners", convertedOwnersTable, new[] { idColumn2 });
            convertedOwnersTable.PrimaryKey = pK_ConvertedOwners;
            var pK_ConvertedOwnersUc = RelationalModel.GetKey(this,
                "TozawaNGO.Attachment.Models.ConvertedOwner",
                new[] { "Id" });
            pK_ConvertedOwners.MappedKeys.Add(pK_ConvertedOwnersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ConvertedOwnersUc).Add(pK_ConvertedOwners);
            convertedOwnersTable.UniqueConstraints.Add("PK_ConvertedOwners", pK_ConvertedOwners);
            relationalModel.Tables.Add(("ConvertedOwners", "Authorization"), convertedOwnersTable);
            var convertedOwnersTableMapping = new TableMapping(convertedOwner, convertedOwnersTable, true);
            convertedOwnersTable.AddTypeMapping(convertedOwnersTableMapping, false);
            tableMappings5.Add(convertedOwnersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, convertedOwner.FindProperty("Id")!, convertedOwnersTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn, convertedOwner.FindProperty("CreatedBy")!, convertedOwnersTableMapping);
            RelationalModel.CreateColumnMapping(createdDateColumn, convertedOwner.FindProperty("CreatedDate")!, convertedOwnersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn, convertedOwner.FindProperty("ModifiedBy")!, convertedOwnersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn, convertedOwner.FindProperty("ModifiedDate")!, convertedOwnersTableMapping);
            RelationalModel.CreateColumnMapping(organizationIdColumn, convertedOwner.FindProperty("OrganizationId")!, convertedOwnersTableMapping);

            var fileAttachment = FindEntityType("TozawaNGO.Attachment.Models.FileAttachment")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            fileAttachment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var tozawaNGOAttachmentModelsFileAttachmentTableBase = new TableBase("TozawaNGO.Attachment.Models.FileAttachment", null, relationalModel);
            var attachmentTypeColumnBase = new ColumnBase<ColumnMappingBase>("AttachmentType", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("AttachmentType", attachmentTypeColumnBase);
            var blobIdColumnBase = new ColumnBase<ColumnMappingBase>("BlobId", "nvarchar(450)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("BlobId", blobIdColumnBase);
            var createdByColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("CreatedBy", createdByColumnBase0);
            var createdDateColumnBase0 = new ColumnBase<ColumnMappingBase>("CreatedDate", "datetime2", tozawaNGOAttachmentModelsFileAttachmentTableBase);
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("CreatedDate", createdDateColumnBase0);
            var extensionColumnBase = new ColumnBase<ColumnMappingBase>("Extension", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("Extension", extensionColumnBase);
            var fileAttachmentTypeColumnBase = new ColumnBase<ColumnMappingBase>("FileAttachmentType", "int", tozawaNGOAttachmentModelsFileAttachmentTableBase);
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("FileAttachmentType", fileAttachmentTypeColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAttachmentModelsFileAttachmentTableBase);
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("Id", idColumnBase3);
            var metaDataColumnBase = new ColumnBase<ColumnMappingBase>("MetaData", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("MetaData", metaDataColumnBase);
            var mimeTypeColumnBase = new ColumnBase<ColumnMappingBase>("MimeType", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("MimeType", mimeTypeColumnBase);
            var miniatureIdColumnBase = new ColumnBase<ColumnMappingBase>("MiniatureId", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("MiniatureId", miniatureIdColumnBase);
            var modifiedByColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase0);
            var modifiedDateColumnBase0 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase0);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", tozawaNGOAttachmentModelsFileAttachmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("Name", nameColumnBase1);
            var organizationIdColumnBase0 = new ColumnBase<ColumnMappingBase>("OrganizationId", "uniqueidentifier", tozawaNGOAttachmentModelsFileAttachmentTableBase);
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("OrganizationId", organizationIdColumnBase0);
            var sizeColumnBase = new ColumnBase<ColumnMappingBase>("Size", "float", tozawaNGOAttachmentModelsFileAttachmentTableBase);
            tozawaNGOAttachmentModelsFileAttachmentTableBase.Columns.Add("Size", sizeColumnBase);
            relationalModel.DefaultTables.Add("TozawaNGO.Attachment.Models.FileAttachment", tozawaNGOAttachmentModelsFileAttachmentTableBase);
            var tozawaNGOAttachmentModelsFileAttachmentMappingBase = new TableMappingBase<ColumnMappingBase>(fileAttachment, tozawaNGOAttachmentModelsFileAttachmentTableBase, true);
            tozawaNGOAttachmentModelsFileAttachmentTableBase.AddTypeMapping(tozawaNGOAttachmentModelsFileAttachmentMappingBase, false);
            defaultTableMappings6.Add(tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, fileAttachment.FindProperty("Id")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)attachmentTypeColumnBase, fileAttachment.FindProperty("AttachmentType")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blobIdColumnBase, fileAttachment.FindProperty("BlobId")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase0, fileAttachment.FindProperty("CreatedBy")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdDateColumnBase0, fileAttachment.FindProperty("CreatedDate")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)extensionColumnBase, fileAttachment.FindProperty("Extension")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fileAttachmentTypeColumnBase, fileAttachment.FindProperty("FileAttachmentType")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)metaDataColumnBase, fileAttachment.FindProperty("MetaData")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mimeTypeColumnBase, fileAttachment.FindProperty("MimeType")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)miniatureIdColumnBase, fileAttachment.FindProperty("MiniatureId")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase0, fileAttachment.FindProperty("ModifiedBy")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase0, fileAttachment.FindProperty("ModifiedDate")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, fileAttachment.FindProperty("Name")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)organizationIdColumnBase0, fileAttachment.FindProperty("OrganizationId")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sizeColumnBase, fileAttachment.FindProperty("Size")!, tozawaNGOAttachmentModelsFileAttachmentMappingBase);

            var tableMappings6 = new List<TableMapping>();
            fileAttachment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var fileAttachmentsTable = new Table("FileAttachments", "Authorization", relationalModel);
            var idColumn3 = new Column("Id", "uniqueidentifier", fileAttachmentsTable);
            fileAttachmentsTable.Columns.Add("Id", idColumn3);
            var attachmentTypeColumn = new Column("AttachmentType", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("AttachmentType", attachmentTypeColumn);
            var blobIdColumn = new Column("BlobId", "nvarchar(450)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("BlobId", blobIdColumn);
            var createdByColumn0 = new Column("CreatedBy", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("CreatedBy", createdByColumn0);
            var createdDateColumn0 = new Column("CreatedDate", "datetime2", fileAttachmentsTable);
            fileAttachmentsTable.Columns.Add("CreatedDate", createdDateColumn0);
            var extensionColumn = new Column("Extension", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("Extension", extensionColumn);
            var fileAttachmentTypeColumn = new Column("FileAttachmentType", "int", fileAttachmentsTable);
            fileAttachmentsTable.Columns.Add("FileAttachmentType", fileAttachmentTypeColumn);
            var metaDataColumn = new Column("MetaData", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("MetaData", metaDataColumn);
            var mimeTypeColumn = new Column("MimeType", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("MimeType", mimeTypeColumn);
            var miniatureIdColumn = new Column("MiniatureId", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("MiniatureId", miniatureIdColumn);
            var modifiedByColumn0 = new Column("ModifiedBy", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("ModifiedBy", modifiedByColumn0);
            var modifiedDateColumn0 = new Column("ModifiedDate", "datetime2", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("ModifiedDate", modifiedDateColumn0);
            var nameColumn1 = new Column("Name", "nvarchar(max)", fileAttachmentsTable)
            {
                IsNullable = true
            };
            fileAttachmentsTable.Columns.Add("Name", nameColumn1);
            var organizationIdColumn0 = new Column("OrganizationId", "uniqueidentifier", fileAttachmentsTable);
            fileAttachmentsTable.Columns.Add("OrganizationId", organizationIdColumn0);
            var sizeColumn = new Column("Size", "float", fileAttachmentsTable);
            fileAttachmentsTable.Columns.Add("Size", sizeColumn);
            var pK_FileAttachments = new UniqueConstraint("PK_FileAttachments", fileAttachmentsTable, new[] { idColumn3 });
            fileAttachmentsTable.PrimaryKey = pK_FileAttachments;
            var pK_FileAttachmentsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Attachment.Models.FileAttachment",
                new[] { "Id" });
            pK_FileAttachments.MappedKeys.Add(pK_FileAttachmentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_FileAttachmentsUc).Add(pK_FileAttachments);
            fileAttachmentsTable.UniqueConstraints.Add("PK_FileAttachments", pK_FileAttachments);
            var iX_FileAttachments_BlobId = new TableIndex(
            "IX_FileAttachments_BlobId", fileAttachmentsTable, new[] { blobIdColumn }, false);
            var iX_FileAttachments_BlobIdIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Attachment.Models.FileAttachment",
                new[] { "BlobId" });
            iX_FileAttachments_BlobId.MappedIndexes.Add(iX_FileAttachments_BlobIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_FileAttachments_BlobIdIx).Add(iX_FileAttachments_BlobId);
            fileAttachmentsTable.Indexes.Add("IX_FileAttachments_BlobId", iX_FileAttachments_BlobId);
            relationalModel.Tables.Add(("FileAttachments", "Authorization"), fileAttachmentsTable);
            var fileAttachmentsTableMapping = new TableMapping(fileAttachment, fileAttachmentsTable, true);
            fileAttachmentsTable.AddTypeMapping(fileAttachmentsTableMapping, false);
            tableMappings6.Add(fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, fileAttachment.FindProperty("Id")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(attachmentTypeColumn, fileAttachment.FindProperty("AttachmentType")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(blobIdColumn, fileAttachment.FindProperty("BlobId")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn0, fileAttachment.FindProperty("CreatedBy")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(createdDateColumn0, fileAttachment.FindProperty("CreatedDate")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(extensionColumn, fileAttachment.FindProperty("Extension")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(fileAttachmentTypeColumn, fileAttachment.FindProperty("FileAttachmentType")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(metaDataColumn, fileAttachment.FindProperty("MetaData")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(mimeTypeColumn, fileAttachment.FindProperty("MimeType")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(miniatureIdColumn, fileAttachment.FindProperty("MiniatureId")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn0, fileAttachment.FindProperty("ModifiedBy")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn0, fileAttachment.FindProperty("ModifiedDate")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, fileAttachment.FindProperty("Name")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(organizationIdColumn0, fileAttachment.FindProperty("OrganizationId")!, fileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(sizeColumn, fileAttachment.FindProperty("Size")!, fileAttachmentsTableMapping);

            var ownerFileAttachment = FindEntityType("TozawaNGO.Attachment.Models.OwnerFileAttachment")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            ownerFileAttachment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase = new TableBase("TozawaNGO.Attachment.Models.OwnerFileAttachment", null, relationalModel);
            var fileAttachmentIdColumnBase = new ColumnBase<ColumnMappingBase>("FileAttachmentId", "uniqueidentifier", tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase);
            tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase.Columns.Add("FileAttachmentId", fileAttachmentIdColumnBase);
            var ownerIdColumnBase = new ColumnBase<ColumnMappingBase>("OwnerId", "uniqueidentifier", tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase);
            tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase.Columns.Add("OwnerId", ownerIdColumnBase);
            relationalModel.DefaultTables.Add("TozawaNGO.Attachment.Models.OwnerFileAttachment", tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase);
            var tozawaNGOAttachmentModelsOwnerFileAttachmentMappingBase = new TableMappingBase<ColumnMappingBase>(ownerFileAttachment, tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase, true);
            tozawaNGOAttachmentModelsOwnerFileAttachmentTableBase.AddTypeMapping(tozawaNGOAttachmentModelsOwnerFileAttachmentMappingBase, false);
            defaultTableMappings7.Add(tozawaNGOAttachmentModelsOwnerFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fileAttachmentIdColumnBase, ownerFileAttachment.FindProperty("FileAttachmentId")!, tozawaNGOAttachmentModelsOwnerFileAttachmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ownerIdColumnBase, ownerFileAttachment.FindProperty("OwnerId")!, tozawaNGOAttachmentModelsOwnerFileAttachmentMappingBase);

            var tableMappings7 = new List<TableMapping>();
            ownerFileAttachment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var ownerFileAttachmentsTable = new Table("OwnerFileAttachments", "Authorization", relationalModel);
            var ownerIdColumn = new Column("OwnerId", "uniqueidentifier", ownerFileAttachmentsTable);
            ownerFileAttachmentsTable.Columns.Add("OwnerId", ownerIdColumn);
            var fileAttachmentIdColumn = new Column("FileAttachmentId", "uniqueidentifier", ownerFileAttachmentsTable);
            ownerFileAttachmentsTable.Columns.Add("FileAttachmentId", fileAttachmentIdColumn);
            var pK_OwnerFileAttachments = new UniqueConstraint("PK_OwnerFileAttachments", ownerFileAttachmentsTable, new[] { ownerIdColumn, fileAttachmentIdColumn });
            ownerFileAttachmentsTable.PrimaryKey = pK_OwnerFileAttachments;
            var pK_OwnerFileAttachmentsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Attachment.Models.OwnerFileAttachment",
                new[] { "OwnerId", "FileAttachmentId" });
            pK_OwnerFileAttachments.MappedKeys.Add(pK_OwnerFileAttachmentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OwnerFileAttachmentsUc).Add(pK_OwnerFileAttachments);
            ownerFileAttachmentsTable.UniqueConstraints.Add("PK_OwnerFileAttachments", pK_OwnerFileAttachments);
            var iX_OwnerFileAttachments_FileAttachmentId = new TableIndex(
            "IX_OwnerFileAttachments_FileAttachmentId", ownerFileAttachmentsTable, new[] { fileAttachmentIdColumn }, false);
            var iX_OwnerFileAttachments_FileAttachmentIdIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Attachment.Models.OwnerFileAttachment",
                new[] { "FileAttachmentId" });
            iX_OwnerFileAttachments_FileAttachmentId.MappedIndexes.Add(iX_OwnerFileAttachments_FileAttachmentIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_OwnerFileAttachments_FileAttachmentIdIx).Add(iX_OwnerFileAttachments_FileAttachmentId);
            ownerFileAttachmentsTable.Indexes.Add("IX_OwnerFileAttachments_FileAttachmentId", iX_OwnerFileAttachments_FileAttachmentId);
            relationalModel.Tables.Add(("OwnerFileAttachments", "Authorization"), ownerFileAttachmentsTable);
            var ownerFileAttachmentsTableMapping = new TableMapping(ownerFileAttachment, ownerFileAttachmentsTable, true);
            ownerFileAttachmentsTable.AddTypeMapping(ownerFileAttachmentsTableMapping, false);
            tableMappings7.Add(ownerFileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(fileAttachmentIdColumn, ownerFileAttachment.FindProperty("FileAttachmentId")!, ownerFileAttachmentsTableMapping);
            RelationalModel.CreateColumnMapping(ownerIdColumn, ownerFileAttachment.FindProperty("OwnerId")!, ownerFileAttachmentsTableMapping);

            var applicationUser = FindEntityType("TozawaNGO.Auth.Models.Authentication.ApplicationUser")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            applicationUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var tozawaNGOAuthModelsAuthenticationApplicationUserTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.ApplicationUser", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "int", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var adminMemberColumnBase = new ColumnBase<ColumnMappingBase>("AdminMember", "bit", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("AdminMember", adminMemberColumnBase);
            var adressColumnBase = new ColumnBase<ColumnMappingBase>("Adress", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("Adress", adressColumnBase);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var createDateColumnBase = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("CreateDate", createDateColumnBase);
            var createdByColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("CreatedBy", createdByColumnBase1);
            var deletedColumnBase = new ColumnBase<ColumnMappingBase>("Deleted", "bit", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("Deleted", deletedColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("Description", descriptionColumnBase);
            var descriptionTextIdColumnBase = new ColumnBase<ColumnMappingBase>("DescriptionTextId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("DescriptionTextId", descriptionTextIdColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(256)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("Email", emailColumnBase);
            var emailConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("EmailConfirmed", "bit", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("EmailConfirmed", emailConfirmedColumnBase);
            var firstNameColumnBase = new ColumnBase<ColumnMappingBase>("FirstName", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("FirstName", firstNameColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "nvarchar(450)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("Id", idColumnBase4);
            var lastAttemptLoginColumnBase = new ColumnBase<ColumnMappingBase>("LastAttemptLogin", "datetime2", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LastAttemptLogin", lastAttemptLoginColumnBase);
            var lastLoginColumnBase = new ColumnBase<ColumnMappingBase>("LastLogin", "datetime2", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LastLogin", lastLoginColumnBase);
            var lastLoginCityColumnBase = new ColumnBase<ColumnMappingBase>("LastLoginCity", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LastLoginCity", lastLoginCityColumnBase);
            var lastLoginCountryColumnBase = new ColumnBase<ColumnMappingBase>("LastLoginCountry", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LastLoginCountry", lastLoginCountryColumnBase);
            var lastLoginIPAdressColumnBase = new ColumnBase<ColumnMappingBase>("LastLoginIPAdress", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LastLoginIPAdress", lastLoginIPAdressColumnBase);
            var lastLoginStateColumnBase = new ColumnBase<ColumnMappingBase>("LastLoginState", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LastLoginState", lastLoginStateColumnBase);
            var lastNameColumnBase = new ColumnBase<ColumnMappingBase>("LastName", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LastName", lastNameColumnBase);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "bit", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "datetimeoffset", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var modifiedByColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase1);
            var modifiedDateColumnBase1 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase1);
            var normalizedEmailColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedEmail", "nvarchar(256)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("NormalizedEmail", normalizedEmailColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "nvarchar(256)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var partnerIdColumnBase = new ColumnBase<ColumnMappingBase>("PartnerId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("PartnerId", partnerIdColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var phoneNumberColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumber", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase);
            var phoneNumberConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumberConfirmed", "bit", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumnBase);
            var refreshTokenColumnBase = new ColumnBase<ColumnMappingBase>("RefreshToken", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("RefreshToken", refreshTokenColumnBase);
            var refreshTokenExpiryTimeColumnBase = new ColumnBase<ColumnMappingBase>("RefreshTokenExpiryTime", "datetime2", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("RefreshTokenExpiryTime", refreshTokenExpiryTimeColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var stationIdsColumnBase = new ColumnBase<ColumnMappingBase>("StationIds", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("StationIds", stationIdsColumnBase);
            var twoFactorEnabledColumnBase = new ColumnBase<ColumnMappingBase>("TwoFactorEnabled", "bit", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumnBase);
            var userCountryColumnBase = new ColumnBase<ColumnMappingBase>("UserCountry", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("UserCountry", userCountryColumnBase);
            var userIdColumnBase3 = new ColumnBase<ColumnMappingBase>("UserId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("UserId", userIdColumnBase3);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "nvarchar(256)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("UserName", userNameColumnBase);
            var userPasswordHashColumnBase = new ColumnBase<ColumnMappingBase>("UserPasswordHash", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.Columns.Add("UserPasswordHash", userPasswordHashColumnBase);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.ApplicationUser", tozawaNGOAuthModelsAuthenticationApplicationUserTableBase);
            var tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase = new TableMappingBase<ColumnMappingBase>(applicationUser, tozawaNGOAuthModelsAuthenticationApplicationUserTableBase, true);
            tozawaNGOAuthModelsAuthenticationApplicationUserTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase, false);
            defaultTableMappings8.Add(tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, applicationUser.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, applicationUser.FindProperty("AccessFailedCount")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adminMemberColumnBase, applicationUser.FindProperty("AdminMember")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adressColumnBase, applicationUser.FindProperty("Adress")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, applicationUser.FindProperty("ConcurrencyStamp")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase, applicationUser.FindProperty("CreateDate")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase1, applicationUser.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedColumnBase, applicationUser.FindProperty("Deleted")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, applicationUser.FindProperty("Description")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionTextIdColumnBase, applicationUser.FindProperty("DescriptionTextId")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, applicationUser.FindProperty("Email")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailConfirmedColumnBase, applicationUser.FindProperty("EmailConfirmed")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)firstNameColumnBase, applicationUser.FindProperty("FirstName")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastAttemptLoginColumnBase, applicationUser.FindProperty("LastAttemptLogin")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastLoginColumnBase, applicationUser.FindProperty("LastLogin")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastLoginCityColumnBase, applicationUser.FindProperty("LastLoginCity")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastLoginCountryColumnBase, applicationUser.FindProperty("LastLoginCountry")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastLoginIPAdressColumnBase, applicationUser.FindProperty("LastLoginIPAdress")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastLoginStateColumnBase, applicationUser.FindProperty("LastLoginState")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastNameColumnBase, applicationUser.FindProperty("LastName")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, applicationUser.FindProperty("LockoutEnabled")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, applicationUser.FindProperty("LockoutEnd")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase1, applicationUser.FindProperty("ModifiedBy")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase1, applicationUser.FindProperty("ModifiedDate")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedEmailColumnBase, applicationUser.FindProperty("NormalizedEmail")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, applicationUser.FindProperty("NormalizedUserName")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)partnerIdColumnBase, applicationUser.FindProperty("PartnerId")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, applicationUser.FindProperty("PasswordHash")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase, applicationUser.FindProperty("PhoneNumber")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberConfirmedColumnBase, applicationUser.FindProperty("PhoneNumberConfirmed")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refreshTokenColumnBase, applicationUser.FindProperty("RefreshToken")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refreshTokenExpiryTimeColumnBase, applicationUser.FindProperty("RefreshTokenExpiryTime")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, applicationUser.FindProperty("SecurityStamp")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stationIdsColumnBase, applicationUser.FindProperty("StationIds")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twoFactorEnabledColumnBase, applicationUser.FindProperty("TwoFactorEnabled")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userCountryColumnBase, applicationUser.FindProperty("UserCountry")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase3, applicationUser.FindProperty("UserId")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, applicationUser.FindProperty("UserName")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userPasswordHashColumnBase, applicationUser.FindProperty("UserPasswordHash")!, tozawaNGOAuthModelsAuthenticationApplicationUserMappingBase);

            var tableMappings8 = new List<TableMapping>();
            applicationUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var aspNetUsersTable = new Table("AspNetUsers", "Authorization", relationalModel);
            var idColumn4 = new Column("Id", "nvarchar(450)", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn4);
            var accessFailedCountColumn = new Column("AccessFailedCount", "int", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var adminMemberColumn = new Column("AdminMember", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AdminMember", adminMemberColumn);
            var adressColumn = new Column("Adress", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Adress", adressColumn);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var createDateColumn = new Column("CreateDate", "datetime2", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("CreateDate", createDateColumn);
            var createdByColumn1 = new Column("CreatedBy", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("CreatedBy", createdByColumn1);
            var deletedColumn = new Column("Deleted", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Deleted", deletedColumn);
            var descriptionColumn = new Column("Description", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Description", descriptionColumn);
            var descriptionTextIdColumn = new Column("DescriptionTextId", "uniqueidentifier", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("DescriptionTextId", descriptionTextIdColumn);
            var emailColumn = new Column("Email", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Email", emailColumn);
            var emailConfirmedColumn = new Column("EmailConfirmed", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("EmailConfirmed", emailConfirmedColumn);
            var firstNameColumn = new Column("FirstName", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("FirstName", firstNameColumn);
            var lastAttemptLoginColumn = new Column("LastAttemptLogin", "datetime2", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LastAttemptLogin", lastAttemptLoginColumn);
            var lastLoginColumn = new Column("LastLogin", "datetime2", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastLogin", lastLoginColumn);
            var lastLoginCityColumn = new Column("LastLoginCity", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastLoginCity", lastLoginCityColumn);
            var lastLoginCountryColumn = new Column("LastLoginCountry", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastLoginCountry", lastLoginCountryColumn);
            var lastLoginIPAdressColumn = new Column("LastLoginIPAdress", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastLoginIPAdress", lastLoginIPAdressColumn);
            var lastLoginStateColumn = new Column("LastLoginState", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastLoginState", lastLoginStateColumn);
            var lastNameColumn = new Column("LastName", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LastName", lastNameColumn);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "datetimeoffset", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var modifiedByColumn1 = new Column("ModifiedBy", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ModifiedBy", modifiedByColumn1);
            var modifiedDateColumn1 = new Column("ModifiedDate", "datetime2", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ModifiedDate", modifiedDateColumn1);
            var normalizedEmailColumn = new Column("NormalizedEmail", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedEmail", normalizedEmailColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var partnerIdColumn = new Column("PartnerId", "uniqueidentifier", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("PartnerId", partnerIdColumn);
            var passwordHashColumn = new Column("PasswordHash", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var phoneNumberColumn = new Column("PhoneNumber", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PhoneNumber", phoneNumberColumn);
            var phoneNumberConfirmedColumn = new Column("PhoneNumberConfirmed", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumn);
            var refreshTokenColumn = new Column("RefreshToken", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("RefreshToken", refreshTokenColumn);
            var refreshTokenExpiryTimeColumn = new Column("RefreshTokenExpiryTime", "datetime2", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("RefreshTokenExpiryTime", refreshTokenExpiryTimeColumn);
            var securityStampColumn = new Column("SecurityStamp", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var stationIdsColumn = new Column("StationIds", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("StationIds", stationIdsColumn);
            var twoFactorEnabledColumn = new Column("TwoFactorEnabled", "bit", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumn);
            var userCountryColumn = new Column("UserCountry", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserCountry", userCountryColumn);
            var userIdColumn3 = new Column("UserId", "uniqueidentifier", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("UserId", userIdColumn3);
            var userNameColumn = new Column("UserName", "nvarchar(256)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserName", userNameColumn);
            var userPasswordHashColumn = new Column("UserPasswordHash", "nvarchar(max)", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserPasswordHash", userPasswordHashColumn);
            var aK_AspNetUsers_UserId = new UniqueConstraint("AK_AspNetUsers_UserId", aspNetUsersTable, new[] { userIdColumn3 });
            var aK_AspNetUsers_UserIdUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "UserId" });
            aK_AspNetUsers_UserId.MappedKeys.Add(aK_AspNetUsers_UserIdUc);
            RelationalModel.GetOrCreateUniqueConstraints(aK_AspNetUsers_UserIdUc).Add(aK_AspNetUsers_UserId);
            aspNetUsersTable.UniqueConstraints.Add("AK_AspNetUsers_UserId", aK_AspNetUsers_UserId);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn4 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalizedEmailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var iX_AspNetUsers_Id_UserId_Email = new TableIndex(
            "IX_AspNetUsers_Id_UserId_Email", aspNetUsersTable, new[] { idColumn4, userIdColumn3, emailColumn }, true);
            var iX_AspNetUsers_Id_UserId_EmailIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "Id", "UserId", "Email" });
            iX_AspNetUsers_Id_UserId_Email.MappedIndexes.Add(iX_AspNetUsers_Id_UserId_EmailIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUsers_Id_UserId_EmailIx).Add(iX_AspNetUsers_Id_UserId_Email);
            aspNetUsersTable.Indexes.Add("IX_AspNetUsers_Id_UserId_Email", iX_AspNetUsers_Id_UserId_Email);
            var iX_AspNetUsers_PartnerId = new TableIndex(
            "IX_AspNetUsers_PartnerId", aspNetUsersTable, new[] { partnerIdColumn }, false);
            var iX_AspNetUsers_PartnerIdIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "PartnerId" });
            iX_AspNetUsers_PartnerId.MappedIndexes.Add(iX_AspNetUsers_PartnerIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUsers_PartnerIdIx).Add(iX_AspNetUsers_PartnerId);
            aspNetUsersTable.Indexes.Add("IX_AspNetUsers_PartnerId", iX_AspNetUsers_PartnerId);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", "Authorization"), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(applicationUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings8.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, applicationUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, applicationUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(adminMemberColumn, applicationUser.FindProperty("AdminMember")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(adressColumn, applicationUser.FindProperty("Adress")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, applicationUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn, applicationUser.FindProperty("CreateDate")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn1, applicationUser.FindProperty("CreatedBy")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(deletedColumn, applicationUser.FindProperty("Deleted")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, applicationUser.FindProperty("Description")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(descriptionTextIdColumn, applicationUser.FindProperty("DescriptionTextId")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, applicationUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailConfirmedColumn, applicationUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(firstNameColumn, applicationUser.FindProperty("FirstName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastAttemptLoginColumn, applicationUser.FindProperty("LastAttemptLogin")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastLoginColumn, applicationUser.FindProperty("LastLogin")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastLoginCityColumn, applicationUser.FindProperty("LastLoginCity")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastLoginCountryColumn, applicationUser.FindProperty("LastLoginCountry")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastLoginIPAdressColumn, applicationUser.FindProperty("LastLoginIPAdress")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastLoginStateColumn, applicationUser.FindProperty("LastLoginState")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lastNameColumn, applicationUser.FindProperty("LastName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, applicationUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, applicationUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn1, applicationUser.FindProperty("ModifiedBy")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn1, applicationUser.FindProperty("ModifiedDate")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedEmailColumn, applicationUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, applicationUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(partnerIdColumn, applicationUser.FindProperty("PartnerId")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, applicationUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn, applicationUser.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberConfirmedColumn, applicationUser.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(refreshTokenColumn, applicationUser.FindProperty("RefreshToken")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(refreshTokenExpiryTimeColumn, applicationUser.FindProperty("RefreshTokenExpiryTime")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, applicationUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(stationIdsColumn, applicationUser.FindProperty("StationIds")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(twoFactorEnabledColumn, applicationUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userCountryColumn, applicationUser.FindProperty("UserCountry")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn3, applicationUser.FindProperty("UserId")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, applicationUser.FindProperty("UserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userPasswordHashColumn, applicationUser.FindProperty("UserPasswordHash")!, aspNetUsersTableMapping);

            var establishment = FindEntityType("TozawaNGO.Auth.Models.Authentication.Establishment")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            establishment.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var tozawaNGOAuthModelsAuthenticationEstablishmentTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.Establishment", null, relationalModel);
            var cOOColumnBase = new ColumnBase<ColumnMappingBase>("COO", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("COO", cOOColumnBase);
            var createDateColumnBase0 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase);
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("CreateDate", createDateColumnBase0);
            var createdByColumnBase2 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("CreatedBy", createdByColumnBase2);
            var deletedColumnBase0 = new ColumnBase<ColumnMappingBase>("Deleted", "bit", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase);
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("Deleted", deletedColumnBase0);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("Description", descriptionColumnBase0);
            var descriptionTextIdColumnBase0 = new ColumnBase<ColumnMappingBase>("DescriptionTextId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase);
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("DescriptionTextId", descriptionTextIdColumnBase0);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase);
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("Id", idColumnBase5);
            var modifiedByColumnBase2 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase2);
            var modifiedDateColumnBase2 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase2);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("Name", nameColumnBase2);
            var stationIdColumnBase = new ColumnBase<ColumnMappingBase>("StationId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase);
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.Columns.Add("StationId", stationIdColumnBase);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.Establishment", tozawaNGOAuthModelsAuthenticationEstablishmentTableBase);
            var tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase = new TableMappingBase<ColumnMappingBase>(establishment, tozawaNGOAuthModelsAuthenticationEstablishmentTableBase, true);
            tozawaNGOAuthModelsAuthenticationEstablishmentTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase, false);
            defaultTableMappings9.Add(tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, establishment.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cOOColumnBase, establishment.FindProperty("COO")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase0, establishment.FindProperty("CreateDate")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase2, establishment.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedColumnBase0, establishment.FindProperty("Deleted")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, establishment.FindProperty("Description")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionTextIdColumnBase0, establishment.FindProperty("DescriptionTextId")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase2, establishment.FindProperty("ModifiedBy")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase2, establishment.FindProperty("ModifiedDate")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, establishment.FindProperty("Name")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stationIdColumnBase, establishment.FindProperty("StationId")!, tozawaNGOAuthModelsAuthenticationEstablishmentMappingBase);

            var tableMappings9 = new List<TableMapping>();
            establishment.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var establishmentsTable = new Table("Establishments", "Authorization", relationalModel);
            var idColumn5 = new Column("Id", "uniqueidentifier", establishmentsTable);
            establishmentsTable.Columns.Add("Id", idColumn5);
            var cOOColumn = new Column("COO", "nvarchar(max)", establishmentsTable)
            {
                IsNullable = true
            };
            establishmentsTable.Columns.Add("COO", cOOColumn);
            var createDateColumn0 = new Column("CreateDate", "datetime2", establishmentsTable);
            establishmentsTable.Columns.Add("CreateDate", createDateColumn0);
            var createdByColumn2 = new Column("CreatedBy", "nvarchar(max)", establishmentsTable)
            {
                IsNullable = true
            };
            establishmentsTable.Columns.Add("CreatedBy", createdByColumn2);
            var deletedColumn0 = new Column("Deleted", "bit", establishmentsTable);
            establishmentsTable.Columns.Add("Deleted", deletedColumn0);
            var descriptionColumn0 = new Column("Description", "nvarchar(max)", establishmentsTable)
            {
                IsNullable = true
            };
            establishmentsTable.Columns.Add("Description", descriptionColumn0);
            var descriptionTextIdColumn0 = new Column("DescriptionTextId", "uniqueidentifier", establishmentsTable);
            establishmentsTable.Columns.Add("DescriptionTextId", descriptionTextIdColumn0);
            var modifiedByColumn2 = new Column("ModifiedBy", "nvarchar(max)", establishmentsTable)
            {
                IsNullable = true
            };
            establishmentsTable.Columns.Add("ModifiedBy", modifiedByColumn2);
            var modifiedDateColumn2 = new Column("ModifiedDate", "datetime2", establishmentsTable)
            {
                IsNullable = true
            };
            establishmentsTable.Columns.Add("ModifiedDate", modifiedDateColumn2);
            var nameColumn2 = new Column("Name", "nvarchar(max)", establishmentsTable)
            {
                IsNullable = true
            };
            establishmentsTable.Columns.Add("Name", nameColumn2);
            var stationIdColumn = new Column("StationId", "uniqueidentifier", establishmentsTable);
            establishmentsTable.Columns.Add("StationId", stationIdColumn);
            var pK_Establishments = new UniqueConstraint("PK_Establishments", establishmentsTable, new[] { idColumn5 });
            establishmentsTable.PrimaryKey = pK_Establishments;
            var pK_EstablishmentsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.Establishment",
                new[] { "Id" });
            pK_Establishments.MappedKeys.Add(pK_EstablishmentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EstablishmentsUc).Add(pK_Establishments);
            establishmentsTable.UniqueConstraints.Add("PK_Establishments", pK_Establishments);
            var iX_Establishments_StationId = new TableIndex(
            "IX_Establishments_StationId", establishmentsTable, new[] { stationIdColumn }, false);
            var iX_Establishments_StationIdIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Auth.Models.Authentication.Establishment",
                new[] { "StationId" });
            iX_Establishments_StationId.MappedIndexes.Add(iX_Establishments_StationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Establishments_StationIdIx).Add(iX_Establishments_StationId);
            establishmentsTable.Indexes.Add("IX_Establishments_StationId", iX_Establishments_StationId);
            relationalModel.Tables.Add(("Establishments", "Authorization"), establishmentsTable);
            var establishmentsTableMapping = new TableMapping(establishment, establishmentsTable, true);
            establishmentsTable.AddTypeMapping(establishmentsTableMapping, false);
            tableMappings9.Add(establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, establishment.FindProperty("Id")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(cOOColumn, establishment.FindProperty("COO")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn0, establishment.FindProperty("CreateDate")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn2, establishment.FindProperty("CreatedBy")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(deletedColumn0, establishment.FindProperty("Deleted")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, establishment.FindProperty("Description")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionTextIdColumn0, establishment.FindProperty("DescriptionTextId")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn2, establishment.FindProperty("ModifiedBy")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn2, establishment.FindProperty("ModifiedDate")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, establishment.FindProperty("Name")!, establishmentsTableMapping);
            RelationalModel.CreateColumnMapping(stationIdColumn, establishment.FindProperty("StationId")!, establishmentsTableMapping);

            var partner = FindEntityType("TozawaNGO.Auth.Models.Authentication.Partner")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            partner.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var tozawaNGOAuthModelsAuthenticationPartnerTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.Partner", null, relationalModel);
            var adressColumnBase0 = new ColumnBase<ColumnMappingBase>("Adress", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("Adress", adressColumnBase0);
            var commentColumnBase = new ColumnBase<ColumnMappingBase>("Comment", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("Comment", commentColumnBase);
            var commentTextIdColumnBase = new ColumnBase<ColumnMappingBase>("CommentTextId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationPartnerTableBase);
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("CommentTextId", commentTextIdColumnBase);
            var createDateColumnBase1 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", tozawaNGOAuthModelsAuthenticationPartnerTableBase);
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("CreateDate", createDateColumnBase1);
            var createdByColumnBase3 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("CreatedBy", createdByColumnBase3);
            var deletedColumnBase1 = new ColumnBase<ColumnMappingBase>("Deleted", "bit", tozawaNGOAuthModelsAuthenticationPartnerTableBase);
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("Deleted", deletedColumnBase1);
            var descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("Description", descriptionColumnBase1);
            var emailColumnBase0 = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(100)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("Email", emailColumnBase0);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationPartnerTableBase);
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("Id", idColumnBase6);
            var modifiedByColumnBase3 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase3);
            var modifiedDateColumnBase3 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase3);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(200)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("Name", nameColumnBase3);
            var phoneNumberColumnBase0 = new ColumnBase<ColumnMappingBase>("PhoneNumber", "nvarchar(100)", tozawaNGOAuthModelsAuthenticationPartnerTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase0);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.Partner", tozawaNGOAuthModelsAuthenticationPartnerTableBase);
            var tozawaNGOAuthModelsAuthenticationPartnerMappingBase = new TableMappingBase<ColumnMappingBase>(partner, tozawaNGOAuthModelsAuthenticationPartnerTableBase, true);
            tozawaNGOAuthModelsAuthenticationPartnerTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationPartnerMappingBase, false);
            defaultTableMappings10.Add(tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, partner.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adressColumnBase0, partner.FindProperty("Adress")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase, partner.FindProperty("Comment")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentTextIdColumnBase, partner.FindProperty("CommentTextId")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase1, partner.FindProperty("CreateDate")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase3, partner.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedColumnBase1, partner.FindProperty("Deleted")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase1, partner.FindProperty("Description")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase0, partner.FindProperty("Email")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase3, partner.FindProperty("ModifiedBy")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase3, partner.FindProperty("ModifiedDate")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, partner.FindProperty("Name")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase0, partner.FindProperty("PhoneNumber")!, tozawaNGOAuthModelsAuthenticationPartnerMappingBase);

            var tableMappings10 = new List<TableMapping>();
            partner.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var partnersTable = new Table("Partners", "Authorization", relationalModel);
            var idColumn6 = new Column("Id", "uniqueidentifier", partnersTable);
            partnersTable.Columns.Add("Id", idColumn6);
            var adressColumn0 = new Column("Adress", "nvarchar(max)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("Adress", adressColumn0);
            var commentColumn = new Column("Comment", "nvarchar(max)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("Comment", commentColumn);
            var commentTextIdColumn = new Column("CommentTextId", "uniqueidentifier", partnersTable);
            partnersTable.Columns.Add("CommentTextId", commentTextIdColumn);
            var createDateColumn1 = new Column("CreateDate", "datetime2", partnersTable);
            partnersTable.Columns.Add("CreateDate", createDateColumn1);
            var createdByColumn3 = new Column("CreatedBy", "nvarchar(max)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("CreatedBy", createdByColumn3);
            var deletedColumn1 = new Column("Deleted", "bit", partnersTable);
            partnersTable.Columns.Add("Deleted", deletedColumn1);
            var descriptionColumn1 = new Column("Description", "nvarchar(max)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("Description", descriptionColumn1);
            var emailColumn0 = new Column("Email", "nvarchar(100)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("Email", emailColumn0);
            var modifiedByColumn3 = new Column("ModifiedBy", "nvarchar(max)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("ModifiedBy", modifiedByColumn3);
            var modifiedDateColumn3 = new Column("ModifiedDate", "datetime2", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("ModifiedDate", modifiedDateColumn3);
            var nameColumn3 = new Column("Name", "nvarchar(200)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("Name", nameColumn3);
            var phoneNumberColumn0 = new Column("PhoneNumber", "nvarchar(100)", partnersTable)
            {
                IsNullable = true
            };
            partnersTable.Columns.Add("PhoneNumber", phoneNumberColumn0);
            var pK_Partners = new UniqueConstraint("PK_Partners", partnersTable, new[] { idColumn6 });
            partnersTable.PrimaryKey = pK_Partners;
            var pK_PartnersUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.Partner",
                new[] { "Id" });
            pK_Partners.MappedKeys.Add(pK_PartnersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PartnersUc).Add(pK_Partners);
            partnersTable.UniqueConstraints.Add("PK_Partners", pK_Partners);
            relationalModel.Tables.Add(("Partners", "Authorization"), partnersTable);
            var partnersTableMapping = new TableMapping(partner, partnersTable, true);
            partnersTable.AddTypeMapping(partnersTableMapping, false);
            tableMappings10.Add(partnersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, partner.FindProperty("Id")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(adressColumn0, partner.FindProperty("Adress")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn, partner.FindProperty("Comment")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(commentTextIdColumn, partner.FindProperty("CommentTextId")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn1, partner.FindProperty("CreateDate")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn3, partner.FindProperty("CreatedBy")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(deletedColumn1, partner.FindProperty("Deleted")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn1, partner.FindProperty("Description")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn0, partner.FindProperty("Email")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn3, partner.FindProperty("ModifiedBy")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn3, partner.FindProperty("ModifiedDate")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, partner.FindProperty("Name")!, partnersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn0, partner.FindProperty("PhoneNumber")!, partnersTableMapping);

            var report = FindEntityType("TozawaNGO.Auth.Models.Authentication.Report")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            report.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var tozawaNGOAuthModelsAuthenticationReportTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.Report", null, relationalModel);
            var commentColumnBase0 = new ColumnBase<ColumnMappingBase>("Comment", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationReportTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("Comment", commentColumnBase0);
            var commentTextIdColumnBase0 = new ColumnBase<ColumnMappingBase>("CommentTextId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationReportTableBase);
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("CommentTextId", commentTextIdColumnBase0);
            var createDateColumnBase2 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", tozawaNGOAuthModelsAuthenticationReportTableBase);
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("CreateDate", createDateColumnBase2);
            var createdByColumnBase4 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationReportTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("CreatedBy", createdByColumnBase4);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationReportTableBase);
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("Id", idColumnBase7);
            var modifiedByColumnBase4 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationReportTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase4);
            var modifiedDateColumnBase4 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAuthModelsAuthenticationReportTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase4);
            var stationIdColumnBase0 = new ColumnBase<ColumnMappingBase>("StationId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationReportTableBase);
            tozawaNGOAuthModelsAuthenticationReportTableBase.Columns.Add("StationId", stationIdColumnBase0);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.Report", tozawaNGOAuthModelsAuthenticationReportTableBase);
            var tozawaNGOAuthModelsAuthenticationReportMappingBase = new TableMappingBase<ColumnMappingBase>(report, tozawaNGOAuthModelsAuthenticationReportTableBase, true);
            tozawaNGOAuthModelsAuthenticationReportTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationReportMappingBase, false);
            defaultTableMappings11.Add(tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, report.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentColumnBase0, report.FindProperty("Comment")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commentTextIdColumnBase0, report.FindProperty("CommentTextId")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase2, report.FindProperty("CreateDate")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase4, report.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase4, report.FindProperty("ModifiedBy")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase4, report.FindProperty("ModifiedDate")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stationIdColumnBase0, report.FindProperty("StationId")!, tozawaNGOAuthModelsAuthenticationReportMappingBase);

            var tableMappings11 = new List<TableMapping>();
            report.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var reportsTable = new Table("Reports", "Authorization", relationalModel);
            var idColumn7 = new Column("Id", "uniqueidentifier", reportsTable);
            reportsTable.Columns.Add("Id", idColumn7);
            var commentColumn0 = new Column("Comment", "nvarchar(max)", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("Comment", commentColumn0);
            var commentTextIdColumn0 = new Column("CommentTextId", "uniqueidentifier", reportsTable);
            reportsTable.Columns.Add("CommentTextId", commentTextIdColumn0);
            var createDateColumn2 = new Column("CreateDate", "datetime2", reportsTable);
            reportsTable.Columns.Add("CreateDate", createDateColumn2);
            var createdByColumn4 = new Column("CreatedBy", "nvarchar(max)", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("CreatedBy", createdByColumn4);
            var modifiedByColumn4 = new Column("ModifiedBy", "nvarchar(max)", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("ModifiedBy", modifiedByColumn4);
            var modifiedDateColumn4 = new Column("ModifiedDate", "datetime2", reportsTable)
            {
                IsNullable = true
            };
            reportsTable.Columns.Add("ModifiedDate", modifiedDateColumn4);
            var stationIdColumn0 = new Column("StationId", "uniqueidentifier", reportsTable);
            reportsTable.Columns.Add("StationId", stationIdColumn0);
            var pK_Reports = new UniqueConstraint("PK_Reports", reportsTable, new[] { idColumn7 });
            reportsTable.PrimaryKey = pK_Reports;
            var pK_ReportsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.Report",
                new[] { "Id" });
            pK_Reports.MappedKeys.Add(pK_ReportsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ReportsUc).Add(pK_Reports);
            reportsTable.UniqueConstraints.Add("PK_Reports", pK_Reports);
            var iX_Reports_StationId = new TableIndex(
            "IX_Reports_StationId", reportsTable, new[] { stationIdColumn0 }, false);
            var iX_Reports_StationIdIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Auth.Models.Authentication.Report",
                new[] { "StationId" });
            iX_Reports_StationId.MappedIndexes.Add(iX_Reports_StationIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reports_StationIdIx).Add(iX_Reports_StationId);
            reportsTable.Indexes.Add("IX_Reports_StationId", iX_Reports_StationId);
            relationalModel.Tables.Add(("Reports", "Authorization"), reportsTable);
            var reportsTableMapping = new TableMapping(report, reportsTable, true);
            reportsTable.AddTypeMapping(reportsTableMapping, false);
            tableMappings11.Add(reportsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, report.FindProperty("Id")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(commentColumn0, report.FindProperty("Comment")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(commentTextIdColumn0, report.FindProperty("CommentTextId")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn2, report.FindProperty("CreateDate")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn4, report.FindProperty("CreatedBy")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn4, report.FindProperty("ModifiedBy")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn4, report.FindProperty("ModifiedDate")!, reportsTableMapping);
            RelationalModel.CreateColumnMapping(stationIdColumn0, report.FindProperty("StationId")!, reportsTableMapping);

            var station = FindEntityType("TozawaNGO.Auth.Models.Authentication.Station")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            station.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var tozawaNGOAuthModelsAuthenticationStationTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.Station", null, relationalModel);
            var adresseColumnBase = new ColumnBase<ColumnMappingBase>("Adresse", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("Adresse", adresseColumnBase);
            var cityColumnBase = new ColumnBase<ColumnMappingBase>("City", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("City", cityColumnBase);
            var countryColumnBase = new ColumnBase<ColumnMappingBase>("Country", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("Country", countryColumnBase);
            var createDateColumnBase3 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", tozawaNGOAuthModelsAuthenticationStationTableBase);
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("CreateDate", createDateColumnBase3);
            var createdByColumnBase5 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("CreatedBy", createdByColumnBase5);
            var deletedColumnBase2 = new ColumnBase<ColumnMappingBase>("Deleted", "bit", tozawaNGOAuthModelsAuthenticationStationTableBase);
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("Deleted", deletedColumnBase2);
            var descriptionColumnBase2 = new ColumnBase<ColumnMappingBase>("Description", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("Description", descriptionColumnBase2);
            var descriptionTextIdColumnBase1 = new ColumnBase<ColumnMappingBase>("DescriptionTextId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationStationTableBase);
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("DescriptionTextId", descriptionTextIdColumnBase1);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationStationTableBase);
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("Id", idColumnBase8);
            var modifiedByColumnBase5 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase5);
            var modifiedDateColumnBase5 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase5);
            var nameColumnBase4 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationStationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationStationTableBase.Columns.Add("Name", nameColumnBase4);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.Station", tozawaNGOAuthModelsAuthenticationStationTableBase);
            var tozawaNGOAuthModelsAuthenticationStationMappingBase = new TableMappingBase<ColumnMappingBase>(station, tozawaNGOAuthModelsAuthenticationStationTableBase, true);
            tozawaNGOAuthModelsAuthenticationStationTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationStationMappingBase, false);
            defaultTableMappings12.Add(tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, station.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)adresseColumnBase, station.FindProperty("Adresse")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cityColumnBase, station.FindProperty("City")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)countryColumnBase, station.FindProperty("Country")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase3, station.FindProperty("CreateDate")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase5, station.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedColumnBase2, station.FindProperty("Deleted")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase2, station.FindProperty("Description")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionTextIdColumnBase1, station.FindProperty("DescriptionTextId")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase5, station.FindProperty("ModifiedBy")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase5, station.FindProperty("ModifiedDate")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase4, station.FindProperty("Name")!, tozawaNGOAuthModelsAuthenticationStationMappingBase);

            var tableMappings12 = new List<TableMapping>();
            station.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var stationsTable = new Table("Stations", "Authorization", relationalModel);
            var idColumn8 = new Column("Id", "uniqueidentifier", stationsTable);
            stationsTable.Columns.Add("Id", idColumn8);
            var adresseColumn = new Column("Adresse", "nvarchar(max)", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("Adresse", adresseColumn);
            var cityColumn = new Column("City", "nvarchar(max)", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("City", cityColumn);
            var countryColumn = new Column("Country", "nvarchar(max)", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("Country", countryColumn);
            var createDateColumn3 = new Column("CreateDate", "datetime2", stationsTable);
            stationsTable.Columns.Add("CreateDate", createDateColumn3);
            var createdByColumn5 = new Column("CreatedBy", "nvarchar(max)", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("CreatedBy", createdByColumn5);
            var deletedColumn2 = new Column("Deleted", "bit", stationsTable);
            stationsTable.Columns.Add("Deleted", deletedColumn2);
            var descriptionColumn2 = new Column("Description", "nvarchar(max)", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("Description", descriptionColumn2);
            var descriptionTextIdColumn1 = new Column("DescriptionTextId", "uniqueidentifier", stationsTable);
            stationsTable.Columns.Add("DescriptionTextId", descriptionTextIdColumn1);
            var modifiedByColumn5 = new Column("ModifiedBy", "nvarchar(max)", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("ModifiedBy", modifiedByColumn5);
            var modifiedDateColumn5 = new Column("ModifiedDate", "datetime2", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("ModifiedDate", modifiedDateColumn5);
            var nameColumn4 = new Column("Name", "nvarchar(max)", stationsTable)
            {
                IsNullable = true
            };
            stationsTable.Columns.Add("Name", nameColumn4);
            var pK_Stations = new UniqueConstraint("PK_Stations", stationsTable, new[] { idColumn8 });
            stationsTable.PrimaryKey = pK_Stations;
            var pK_StationsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.Station",
                new[] { "Id" });
            pK_Stations.MappedKeys.Add(pK_StationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_StationsUc).Add(pK_Stations);
            stationsTable.UniqueConstraints.Add("PK_Stations", pK_Stations);
            relationalModel.Tables.Add(("Stations", "Authorization"), stationsTable);
            var stationsTableMapping = new TableMapping(station, stationsTable, true);
            stationsTable.AddTypeMapping(stationsTableMapping, false);
            tableMappings12.Add(stationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, station.FindProperty("Id")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(adresseColumn, station.FindProperty("Adresse")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(cityColumn, station.FindProperty("City")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(countryColumn, station.FindProperty("Country")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn3, station.FindProperty("CreateDate")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn5, station.FindProperty("CreatedBy")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(deletedColumn2, station.FindProperty("Deleted")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn2, station.FindProperty("Description")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionTextIdColumn1, station.FindProperty("DescriptionTextId")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn5, station.FindProperty("ModifiedBy")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn5, station.FindProperty("ModifiedDate")!, stationsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn4, station.FindProperty("Name")!, stationsTableMapping);

            var translation = FindEntityType("TozawaNGO.Auth.Models.Authentication.Translation")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            translation.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var tozawaNGOAuthModelsAuthenticationTranslationTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.Translation", null, relationalModel);
            var createDateColumnBase4 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", tozawaNGOAuthModelsAuthenticationTranslationTableBase);
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.Columns.Add("CreateDate", createDateColumnBase4);
            var createdByColumnBase6 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationTranslationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.Columns.Add("CreatedBy", createdByColumnBase6);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationTranslationTableBase);
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.Columns.Add("Id", idColumnBase9);
            var languageTextColumnBase = new ColumnBase<ColumnMappingBase>("LanguageText", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationTranslationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.Columns.Add("LanguageText", languageTextColumnBase);
            var modifiedByColumnBase6 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationTranslationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase6);
            var modifiedDateColumnBase6 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAuthModelsAuthenticationTranslationTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase6);
            var textIdColumnBase = new ColumnBase<ColumnMappingBase>("TextId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationTranslationTableBase);
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.Columns.Add("TextId", textIdColumnBase);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.Translation", tozawaNGOAuthModelsAuthenticationTranslationTableBase);
            var tozawaNGOAuthModelsAuthenticationTranslationMappingBase = new TableMappingBase<ColumnMappingBase>(translation, tozawaNGOAuthModelsAuthenticationTranslationTableBase, true);
            tozawaNGOAuthModelsAuthenticationTranslationTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationTranslationMappingBase, false);
            defaultTableMappings13.Add(tozawaNGOAuthModelsAuthenticationTranslationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, translation.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationTranslationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase4, translation.FindProperty("CreateDate")!, tozawaNGOAuthModelsAuthenticationTranslationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase6, translation.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationTranslationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)languageTextColumnBase, translation.FindProperty("LanguageText")!, tozawaNGOAuthModelsAuthenticationTranslationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase6, translation.FindProperty("ModifiedBy")!, tozawaNGOAuthModelsAuthenticationTranslationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase6, translation.FindProperty("ModifiedDate")!, tozawaNGOAuthModelsAuthenticationTranslationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)textIdColumnBase, translation.FindProperty("TextId")!, tozawaNGOAuthModelsAuthenticationTranslationMappingBase);

            var tableMappings13 = new List<TableMapping>();
            translation.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var translationsTable = new Table("Translations", "Authorization", relationalModel);
            var idColumn9 = new Column("Id", "uniqueidentifier", translationsTable);
            translationsTable.Columns.Add("Id", idColumn9);
            var createDateColumn4 = new Column("CreateDate", "datetime2", translationsTable);
            translationsTable.Columns.Add("CreateDate", createDateColumn4);
            var createdByColumn6 = new Column("CreatedBy", "nvarchar(max)", translationsTable)
            {
                IsNullable = true
            };
            translationsTable.Columns.Add("CreatedBy", createdByColumn6);
            var languageTextColumn = new Column("LanguageText", "nvarchar(max)", translationsTable)
            {
                IsNullable = true
            };
            translationsTable.Columns.Add("LanguageText", languageTextColumn);
            var modifiedByColumn6 = new Column("ModifiedBy", "nvarchar(max)", translationsTable)
            {
                IsNullable = true
            };
            translationsTable.Columns.Add("ModifiedBy", modifiedByColumn6);
            var modifiedDateColumn6 = new Column("ModifiedDate", "datetime2", translationsTable)
            {
                IsNullable = true
            };
            translationsTable.Columns.Add("ModifiedDate", modifiedDateColumn6);
            var textIdColumn = new Column("TextId", "uniqueidentifier", translationsTable);
            translationsTable.Columns.Add("TextId", textIdColumn);
            var pK_Translations = new UniqueConstraint("PK_Translations", translationsTable, new[] { idColumn9 });
            translationsTable.PrimaryKey = pK_Translations;
            var pK_TranslationsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.Translation",
                new[] { "Id" });
            pK_Translations.MappedKeys.Add(pK_TranslationsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_TranslationsUc).Add(pK_Translations);
            translationsTable.UniqueConstraints.Add("PK_Translations", pK_Translations);
            relationalModel.Tables.Add(("Translations", "Authorization"), translationsTable);
            var translationsTableMapping = new TableMapping(translation, translationsTable, true);
            translationsTable.AddTypeMapping(translationsTableMapping, false);
            tableMappings13.Add(translationsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, translation.FindProperty("Id")!, translationsTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn4, translation.FindProperty("CreateDate")!, translationsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn6, translation.FindProperty("CreatedBy")!, translationsTableMapping);
            RelationalModel.CreateColumnMapping(languageTextColumn, translation.FindProperty("LanguageText")!, translationsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn6, translation.FindProperty("ModifiedBy")!, translationsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn6, translation.FindProperty("ModifiedDate")!, translationsTableMapping);
            RelationalModel.CreateColumnMapping(textIdColumn, translation.FindProperty("TextId")!, translationsTableMapping);

            var userHashPwd = FindEntityType("TozawaNGO.Auth.Models.Authentication.UserHashPwd")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            userHashPwd.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.UserHashPwd", null, relationalModel);
            var createDateColumnBase5 = new ColumnBase<ColumnMappingBase>("CreateDate", "datetime2", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase);
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.Columns.Add("CreateDate", createDateColumnBase5);
            var createdByColumnBase7 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.Columns.Add("CreatedBy", createdByColumnBase7);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase);
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.Columns.Add("Id", idColumnBase10);
            var modifiedByColumnBase7 = new ColumnBase<ColumnMappingBase>("ModifiedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.Columns.Add("ModifiedBy", modifiedByColumnBase7);
            var modifiedDateColumnBase7 = new ColumnBase<ColumnMappingBase>("ModifiedDate", "datetime2", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.Columns.Add("ModifiedDate", modifiedDateColumnBase7);
            var passwordSaltColumnBase = new ColumnBase<ColumnMappingBase>("PasswordSalt", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.Columns.Add("PasswordSalt", passwordSaltColumnBase);
            var userIdColumnBase4 = new ColumnBase<ColumnMappingBase>("UserId", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase);
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.Columns.Add("UserId", userIdColumnBase4);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.UserHashPwd", tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase);
            var tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase = new TableMappingBase<ColumnMappingBase>(userHashPwd, tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase, true);
            tozawaNGOAuthModelsAuthenticationUserHashPwdTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase, false);
            defaultTableMappings14.Add(tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, userHashPwd.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createDateColumnBase5, userHashPwd.FindProperty("CreateDate")!, tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase7, userHashPwd.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedByColumnBase7, userHashPwd.FindProperty("ModifiedBy")!, tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modifiedDateColumnBase7, userHashPwd.FindProperty("ModifiedDate")!, tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordSaltColumnBase, userHashPwd.FindProperty("PasswordSalt")!, tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase4, userHashPwd.FindProperty("UserId")!, tozawaNGOAuthModelsAuthenticationUserHashPwdMappingBase);

            var tableMappings14 = new List<TableMapping>();
            userHashPwd.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var userHashPwdsTable = new Table("UserHashPwds", "Authorization", relationalModel);
            var idColumn10 = new Column("Id", "uniqueidentifier", userHashPwdsTable);
            userHashPwdsTable.Columns.Add("Id", idColumn10);
            var createDateColumn5 = new Column("CreateDate", "datetime2", userHashPwdsTable);
            userHashPwdsTable.Columns.Add("CreateDate", createDateColumn5);
            var createdByColumn7 = new Column("CreatedBy", "nvarchar(max)", userHashPwdsTable)
            {
                IsNullable = true
            };
            userHashPwdsTable.Columns.Add("CreatedBy", createdByColumn7);
            var modifiedByColumn7 = new Column("ModifiedBy", "nvarchar(max)", userHashPwdsTable)
            {
                IsNullable = true
            };
            userHashPwdsTable.Columns.Add("ModifiedBy", modifiedByColumn7);
            var modifiedDateColumn7 = new Column("ModifiedDate", "datetime2", userHashPwdsTable)
            {
                IsNullable = true
            };
            userHashPwdsTable.Columns.Add("ModifiedDate", modifiedDateColumn7);
            var passwordSaltColumn = new Column("PasswordSalt", "nvarchar(max)", userHashPwdsTable)
            {
                IsNullable = true
            };
            userHashPwdsTable.Columns.Add("PasswordSalt", passwordSaltColumn);
            var userIdColumn4 = new Column("UserId", "uniqueidentifier", userHashPwdsTable);
            userHashPwdsTable.Columns.Add("UserId", userIdColumn4);
            var pK_UserHashPwds = new UniqueConstraint("PK_UserHashPwds", userHashPwdsTable, new[] { idColumn10 });
            userHashPwdsTable.PrimaryKey = pK_UserHashPwds;
            var pK_UserHashPwdsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.UserHashPwd",
                new[] { "Id" });
            pK_UserHashPwds.MappedKeys.Add(pK_UserHashPwdsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserHashPwdsUc).Add(pK_UserHashPwds);
            userHashPwdsTable.UniqueConstraints.Add("PK_UserHashPwds", pK_UserHashPwds);
            var iX_UserHashPwds_UserId = new TableIndex(
            "IX_UserHashPwds_UserId", userHashPwdsTable, new[] { userIdColumn4 }, true);
            var iX_UserHashPwds_UserIdIx = RelationalModel.GetIndex(this,
                "TozawaNGO.Auth.Models.Authentication.UserHashPwd",
                new[] { "UserId" });
            iX_UserHashPwds_UserId.MappedIndexes.Add(iX_UserHashPwds_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_UserHashPwds_UserIdIx).Add(iX_UserHashPwds_UserId);
            userHashPwdsTable.Indexes.Add("IX_UserHashPwds_UserId", iX_UserHashPwds_UserId);
            relationalModel.Tables.Add(("UserHashPwds", "Authorization"), userHashPwdsTable);
            var userHashPwdsTableMapping = new TableMapping(userHashPwd, userHashPwdsTable, true);
            userHashPwdsTable.AddTypeMapping(userHashPwdsTableMapping, false);
            tableMappings14.Add(userHashPwdsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, userHashPwd.FindProperty("Id")!, userHashPwdsTableMapping);
            RelationalModel.CreateColumnMapping(createDateColumn5, userHashPwd.FindProperty("CreateDate")!, userHashPwdsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn7, userHashPwd.FindProperty("CreatedBy")!, userHashPwdsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedByColumn7, userHashPwd.FindProperty("ModifiedBy")!, userHashPwdsTableMapping);
            RelationalModel.CreateColumnMapping(modifiedDateColumn7, userHashPwd.FindProperty("ModifiedDate")!, userHashPwdsTableMapping);
            RelationalModel.CreateColumnMapping(passwordSaltColumn, userHashPwd.FindProperty("PasswordSalt")!, userHashPwdsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn4, userHashPwd.FindProperty("UserId")!, userHashPwdsTableMapping);

            var userLog = FindEntityType("TozawaNGO.Auth.Models.Authentication.UserLog")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            userLog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var tozawaNGOAuthModelsAuthenticationUserLogTableBase = new TableBase("TozawaNGO.Auth.Models.Authentication.UserLog", null, relationalModel);
            var createdByColumnBase8 = new ColumnBase<ColumnMappingBase>("CreatedBy", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationUserLogTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationUserLogTableBase.Columns.Add("CreatedBy", createdByColumnBase8);
            var createdDateColumnBase1 = new ColumnBase<ColumnMappingBase>("CreatedDate", "datetime2", tozawaNGOAuthModelsAuthenticationUserLogTableBase);
            tozawaNGOAuthModelsAuthenticationUserLogTableBase.Columns.Add("CreatedDate", createdDateColumnBase1);
            var eventColumnBase = new ColumnBase<ColumnMappingBase>("Event", "int", tozawaNGOAuthModelsAuthenticationUserLogTableBase);
            tozawaNGOAuthModelsAuthenticationUserLogTableBase.Columns.Add("Event", eventColumnBase);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOAuthModelsAuthenticationUserLogTableBase);
            tozawaNGOAuthModelsAuthenticationUserLogTableBase.Columns.Add("Id", idColumnBase11);
            var phoneNumberColumnBase1 = new ColumnBase<ColumnMappingBase>("PhoneNumber", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationUserLogTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationUserLogTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase1);
            var userNameColumnBase0 = new ColumnBase<ColumnMappingBase>("UserName", "nvarchar(max)", tozawaNGOAuthModelsAuthenticationUserLogTableBase)
            {
                IsNullable = true
            };
            tozawaNGOAuthModelsAuthenticationUserLogTableBase.Columns.Add("UserName", userNameColumnBase0);
            relationalModel.DefaultTables.Add("TozawaNGO.Auth.Models.Authentication.UserLog", tozawaNGOAuthModelsAuthenticationUserLogTableBase);
            var tozawaNGOAuthModelsAuthenticationUserLogMappingBase = new TableMappingBase<ColumnMappingBase>(userLog, tozawaNGOAuthModelsAuthenticationUserLogTableBase, true);
            tozawaNGOAuthModelsAuthenticationUserLogTableBase.AddTypeMapping(tozawaNGOAuthModelsAuthenticationUserLogMappingBase, false);
            defaultTableMappings15.Add(tozawaNGOAuthModelsAuthenticationUserLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, userLog.FindProperty("Id")!, tozawaNGOAuthModelsAuthenticationUserLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdByColumnBase8, userLog.FindProperty("CreatedBy")!, tozawaNGOAuthModelsAuthenticationUserLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdDateColumnBase1, userLog.FindProperty("CreatedDate")!, tozawaNGOAuthModelsAuthenticationUserLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventColumnBase, userLog.FindProperty("Event")!, tozawaNGOAuthModelsAuthenticationUserLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase1, userLog.FindProperty("PhoneNumber")!, tozawaNGOAuthModelsAuthenticationUserLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase0, userLog.FindProperty("UserName")!, tozawaNGOAuthModelsAuthenticationUserLogMappingBase);

            var tableMappings15 = new List<TableMapping>();
            userLog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var userLogsTable = new Table("UserLogs", "Authorization", relationalModel);
            var idColumn11 = new Column("Id", "uniqueidentifier", userLogsTable);
            userLogsTable.Columns.Add("Id", idColumn11);
            var createdByColumn8 = new Column("CreatedBy", "nvarchar(max)", userLogsTable)
            {
                IsNullable = true
            };
            userLogsTable.Columns.Add("CreatedBy", createdByColumn8);
            var createdDateColumn1 = new Column("CreatedDate", "datetime2", userLogsTable);
            userLogsTable.Columns.Add("CreatedDate", createdDateColumn1);
            var eventColumn = new Column("Event", "int", userLogsTable);
            userLogsTable.Columns.Add("Event", eventColumn);
            var phoneNumberColumn1 = new Column("PhoneNumber", "nvarchar(max)", userLogsTable)
            {
                IsNullable = true
            };
            userLogsTable.Columns.Add("PhoneNumber", phoneNumberColumn1);
            var userNameColumn0 = new Column("UserName", "nvarchar(max)", userLogsTable)
            {
                IsNullable = true
            };
            userLogsTable.Columns.Add("UserName", userNameColumn0);
            var pK_UserLogs = new UniqueConstraint("PK_UserLogs", userLogsTable, new[] { idColumn11 });
            userLogsTable.PrimaryKey = pK_UserLogs;
            var pK_UserLogsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Auth.Models.Authentication.UserLog",
                new[] { "Id" });
            pK_UserLogs.MappedKeys.Add(pK_UserLogsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UserLogsUc).Add(pK_UserLogs);
            userLogsTable.UniqueConstraints.Add("PK_UserLogs", pK_UserLogs);
            relationalModel.Tables.Add(("UserLogs", "Authorization"), userLogsTable);
            var userLogsTableMapping = new TableMapping(userLog, userLogsTable, true);
            userLogsTable.AddTypeMapping(userLogsTableMapping, false);
            tableMappings15.Add(userLogsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn11, userLog.FindProperty("Id")!, userLogsTableMapping);
            RelationalModel.CreateColumnMapping(createdByColumn8, userLog.FindProperty("CreatedBy")!, userLogsTableMapping);
            RelationalModel.CreateColumnMapping(createdDateColumn1, userLog.FindProperty("CreatedDate")!, userLogsTableMapping);
            RelationalModel.CreateColumnMapping(eventColumn, userLog.FindProperty("Event")!, userLogsTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn1, userLog.FindProperty("PhoneNumber")!, userLogsTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn0, userLog.FindProperty("UserName")!, userLogsTableMapping);

            var audit = FindEntityType("TozawaNGO.Context.TozawangoDbContext+Audit")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            audit.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var tozawaNGOContextTozawangoDbContextAuditTableBase = new TableBase("TozawaNGO.Context.TozawangoDbContext+Audit", null, relationalModel);
            var dateTimeColumnBase = new ColumnBase<ColumnMappingBase>("DateTime", "datetime2", tozawaNGOContextTozawangoDbContextAuditTableBase);
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("DateTime", dateTimeColumnBase);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", tozawaNGOContextTozawangoDbContextAuditTableBase);
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("Id", idColumnBase12);
            var inloggedEmailColumnBase = new ColumnBase<ColumnMappingBase>("InloggedEmail", "nvarchar(max)", tozawaNGOContextTozawangoDbContextAuditTableBase)
            {
                IsNullable = true
            };
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("InloggedEmail", inloggedEmailColumnBase);
            var keyValuesColumnBase = new ColumnBase<ColumnMappingBase>("KeyValues", "nvarchar(max)", tozawaNGOContextTozawangoDbContextAuditTableBase)
            {
                IsNullable = true
            };
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("KeyValues", keyValuesColumnBase);
            var newValuesColumnBase = new ColumnBase<ColumnMappingBase>("NewValues", "nvarchar(max)", tozawaNGOContextTozawangoDbContextAuditTableBase)
            {
                IsNullable = true
            };
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("NewValues", newValuesColumnBase);
            var oldValuesColumnBase = new ColumnBase<ColumnMappingBase>("OldValues", "nvarchar(max)", tozawaNGOContextTozawangoDbContextAuditTableBase)
            {
                IsNullable = true
            };
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("OldValues", oldValuesColumnBase);
            var partnerIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PartnerId", "uniqueidentifier", tozawaNGOContextTozawangoDbContextAuditTableBase);
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("PartnerId", partnerIdColumnBase0);
            var tableNameColumnBase = new ColumnBase<ColumnMappingBase>("TableName", "nvarchar(max)", tozawaNGOContextTozawangoDbContextAuditTableBase)
            {
                IsNullable = true
            };
            tozawaNGOContextTozawangoDbContextAuditTableBase.Columns.Add("TableName", tableNameColumnBase);
            relationalModel.DefaultTables.Add("TozawaNGO.Context.TozawangoDbContext+Audit", tozawaNGOContextTozawangoDbContextAuditTableBase);
            var tozawaNGOContextTozawangoDbContextAuditMappingBase = new TableMappingBase<ColumnMappingBase>(audit, tozawaNGOContextTozawangoDbContextAuditTableBase, true);
            tozawaNGOContextTozawangoDbContextAuditTableBase.AddTypeMapping(tozawaNGOContextTozawangoDbContextAuditMappingBase, false);
            defaultTableMappings16.Add(tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, audit.FindProperty("Id")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeColumnBase, audit.FindProperty("DateTime")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)inloggedEmailColumnBase, audit.FindProperty("InloggedEmail")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyValuesColumnBase, audit.FindProperty("KeyValues")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)newValuesColumnBase, audit.FindProperty("NewValues")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)oldValuesColumnBase, audit.FindProperty("OldValues")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)partnerIdColumnBase0, audit.FindProperty("PartnerId")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tableNameColumnBase, audit.FindProperty("TableName")!, tozawaNGOContextTozawangoDbContextAuditMappingBase);

            var tableMappings16 = new List<TableMapping>();
            audit.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var auditsTable = new Table("Audits", "Authorization", relationalModel);
            var idColumn12 = new Column("Id", "uniqueidentifier", auditsTable);
            auditsTable.Columns.Add("Id", idColumn12);
            var dateTimeColumn = new Column("DateTime", "datetime2", auditsTable);
            auditsTable.Columns.Add("DateTime", dateTimeColumn);
            var inloggedEmailColumn = new Column("InloggedEmail", "nvarchar(max)", auditsTable)
            {
                IsNullable = true
            };
            auditsTable.Columns.Add("InloggedEmail", inloggedEmailColumn);
            var keyValuesColumn = new Column("KeyValues", "nvarchar(max)", auditsTable)
            {
                IsNullable = true
            };
            auditsTable.Columns.Add("KeyValues", keyValuesColumn);
            var newValuesColumn = new Column("NewValues", "nvarchar(max)", auditsTable)
            {
                IsNullable = true
            };
            auditsTable.Columns.Add("NewValues", newValuesColumn);
            var oldValuesColumn = new Column("OldValues", "nvarchar(max)", auditsTable)
            {
                IsNullable = true
            };
            auditsTable.Columns.Add("OldValues", oldValuesColumn);
            var partnerIdColumn0 = new Column("PartnerId", "uniqueidentifier", auditsTable);
            auditsTable.Columns.Add("PartnerId", partnerIdColumn0);
            var tableNameColumn = new Column("TableName", "nvarchar(max)", auditsTable)
            {
                IsNullable = true
            };
            auditsTable.Columns.Add("TableName", tableNameColumn);
            var pK_Audits = new UniqueConstraint("PK_Audits", auditsTable, new[] { idColumn12 });
            auditsTable.PrimaryKey = pK_Audits;
            var pK_AuditsUc = RelationalModel.GetKey(this,
                "TozawaNGO.Context.TozawangoDbContext+Audit",
                new[] { "Id" });
            pK_Audits.MappedKeys.Add(pK_AuditsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AuditsUc).Add(pK_Audits);
            auditsTable.UniqueConstraints.Add("PK_Audits", pK_Audits);
            relationalModel.Tables.Add(("Audits", "Authorization"), auditsTable);
            var auditsTableMapping = new TableMapping(audit, auditsTable, true);
            auditsTable.AddTypeMapping(auditsTableMapping, false);
            tableMappings16.Add(auditsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn12, audit.FindProperty("Id")!, auditsTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeColumn, audit.FindProperty("DateTime")!, auditsTableMapping);
            RelationalModel.CreateColumnMapping(inloggedEmailColumn, audit.FindProperty("InloggedEmail")!, auditsTableMapping);
            RelationalModel.CreateColumnMapping(keyValuesColumn, audit.FindProperty("KeyValues")!, auditsTableMapping);
            RelationalModel.CreateColumnMapping(newValuesColumn, audit.FindProperty("NewValues")!, auditsTableMapping);
            RelationalModel.CreateColumnMapping(oldValuesColumn, audit.FindProperty("OldValues")!, auditsTableMapping);
            RelationalModel.CreateColumnMapping(partnerIdColumn0, audit.FindProperty("PartnerId")!, auditsTableMapping);
            RelationalModel.CreateColumnMapping(tableNameColumn, audit.FindProperty("TableName")!, auditsTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Restrict);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Restrict);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn0 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Restrict);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Restrict);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Restrict);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUsers_Partners_PartnerId = new ForeignKeyConstraint(
                "FK_AspNetUsers_Partners_PartnerId", aspNetUsersTable, partnersTable,
                new[] { partnerIdColumn },
                partnersTable.FindUniqueConstraint("PK_Partners")!, ReferentialAction.Restrict);
            var fK_AspNetUsers_Partners_PartnerIdFk = RelationalModel.GetForeignKey(this,
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "PartnerId" },
                "TozawaNGO.Auth.Models.Authentication.Partner",
                new[] { "Id" });
            fK_AspNetUsers_Partners_PartnerId.MappedForeignKeys.Add(fK_AspNetUsers_Partners_PartnerIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUsers_Partners_PartnerIdFk).Add(fK_AspNetUsers_Partners_PartnerId);
            aspNetUsersTable.ForeignKeyConstraints.Add(fK_AspNetUsers_Partners_PartnerId);
            partnersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUsers_Partners_PartnerId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Restrict);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            var fK_Establishments_Stations_StationId = new ForeignKeyConstraint(
                "FK_Establishments_Stations_StationId", establishmentsTable, stationsTable,
                new[] { stationIdColumn },
                stationsTable.FindUniqueConstraint("PK_Stations")!, ReferentialAction.Restrict);
            var fK_Establishments_Stations_StationIdFk = RelationalModel.GetForeignKey(this,
                "TozawaNGO.Auth.Models.Authentication.Establishment",
                new[] { "StationId" },
                "TozawaNGO.Auth.Models.Authentication.Station",
                new[] { "Id" });
            fK_Establishments_Stations_StationId.MappedForeignKeys.Add(fK_Establishments_Stations_StationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Establishments_Stations_StationIdFk).Add(fK_Establishments_Stations_StationId);
            establishmentsTable.ForeignKeyConstraints.Add(fK_Establishments_Stations_StationId);
            stationsTable.ReferencingForeignKeyConstraints.Add(fK_Establishments_Stations_StationId);
            var fK_OwnerFileAttachments_FileAttachments_FileAttachmentId = new ForeignKeyConstraint(
                "FK_OwnerFileAttachments_FileAttachments_FileAttachmentId", ownerFileAttachmentsTable, fileAttachmentsTable,
                new[] { fileAttachmentIdColumn },
                fileAttachmentsTable.FindUniqueConstraint("PK_FileAttachments")!, ReferentialAction.Restrict);
            var fK_OwnerFileAttachments_FileAttachments_FileAttachmentIdFk = RelationalModel.GetForeignKey(this,
                "TozawaNGO.Attachment.Models.OwnerFileAttachment",
                new[] { "FileAttachmentId" },
                "TozawaNGO.Attachment.Models.FileAttachment",
                new[] { "Id" });
            fK_OwnerFileAttachments_FileAttachments_FileAttachmentId.MappedForeignKeys.Add(fK_OwnerFileAttachments_FileAttachments_FileAttachmentIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_OwnerFileAttachments_FileAttachments_FileAttachmentIdFk).Add(fK_OwnerFileAttachments_FileAttachments_FileAttachmentId);
            ownerFileAttachmentsTable.ForeignKeyConstraints.Add(fK_OwnerFileAttachments_FileAttachments_FileAttachmentId);
            fileAttachmentsTable.ReferencingForeignKeyConstraints.Add(fK_OwnerFileAttachments_FileAttachments_FileAttachmentId);
            var fK_Reports_Stations_StationId = new ForeignKeyConstraint(
                "FK_Reports_Stations_StationId", reportsTable, stationsTable,
                new[] { stationIdColumn0 },
                stationsTable.FindUniqueConstraint("PK_Stations")!, ReferentialAction.Restrict);
            var fK_Reports_Stations_StationIdFk = RelationalModel.GetForeignKey(this,
                "TozawaNGO.Auth.Models.Authentication.Report",
                new[] { "StationId" },
                "TozawaNGO.Auth.Models.Authentication.Station",
                new[] { "Id" });
            fK_Reports_Stations_StationId.MappedForeignKeys.Add(fK_Reports_Stations_StationIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reports_Stations_StationIdFk).Add(fK_Reports_Stations_StationId);
            reportsTable.ForeignKeyConstraints.Add(fK_Reports_Stations_StationId);
            stationsTable.ReferencingForeignKeyConstraints.Add(fK_Reports_Stations_StationId);
            var fK_UserHashPwds_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_UserHashPwds_AspNetUsers_UserId", userHashPwdsTable, aspNetUsersTable,
                new[] { userIdColumn4 },
                aspNetUsersTable.FindUniqueConstraint("AK_AspNetUsers_UserId")!, ReferentialAction.Restrict);
            var fK_UserHashPwds_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "TozawaNGO.Auth.Models.Authentication.UserHashPwd",
                new[] { "UserId" },
                "TozawaNGO.Auth.Models.Authentication.ApplicationUser",
                new[] { "UserId" });
            fK_UserHashPwds_AspNetUsers_UserId.MappedForeignKeys.Add(fK_UserHashPwds_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_UserHashPwds_AspNetUsers_UserIdFk).Add(fK_UserHashPwds_AspNetUsers_UserId);
            userHashPwdsTable.ForeignKeyConstraints.Add(fK_UserHashPwds_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_UserHashPwds_AspNetUsers_UserId);
            return relationalModel.MakeReadOnly();
        }
    }
}
