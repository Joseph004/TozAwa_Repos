@implements IDisposable

@using TozAwaHome.Services;


@if (isLoaded)
{
    @ChildContent

    @if(_RequestInProgress)
    {
        <div class="ta-loading loading loaderDiv">
            <div class="row loaderDiv">
                <div class="col-md-12">
                    <div class="d-flex align-center">
                        <MudProgressCircular Style="@($"color: {"#ff5e14"};")" Size="Size.Medium" Indeterminate="true" />
                        <h3>
                            <img src=@_tozAwaImage height="50px" width="150px"
                                 alt="loading tozawa image" />
                        </h3>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="ta-loading loading">
        <div class="row">
            <div class="col-md-12">
                <div class="d-flex align-center">
                    <MudProgressCircular Style="@($"color: {"#ff5e14"};")" Size="Size.Medium" Indeterminate="true" />
                    <h3>
                        <img src=@_tozAwaImage height="50px" width="150px"
                        alt="loading tozawa image" />
                    </h3>
                </div>
            </div>
        </div>
    </div>
}

@code {
    bool isLoaded;

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Inject] LoadingState LoadingState { get; set; }
    private bool _RequestInProgress = false;
    private string _tozAwaImage = "images/tozawaloader.png";

    protected override async Task OnInitializedAsync()
    {
        LoadingState.OnChange += CloseLoading;
        await LoadImage();

        await base.OnInitializedAsync();
    }

    private void CloseLoading()
    {
        _RequestInProgress = LoadingState.RequestInProgress;

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        LoadingState.OnChange -= CloseLoading;
    }

    private async Task LoadImage()
    {
        try
        {
            Stream stream = null;
#if WINDOWS
            stream = await FileSystem.OpenAppPackageFileAsync($"wwwroot/images/tozawaloader.png");
#else
            stream = await FileSystem.OpenAppPackageFileAsync($"tozawaloader.png");
#endif
            var reader = new StreamReader(stream);
            byte[] result;

            var streamReader = new MemoryStream();
            stream.CopyTo(streamReader);
            result = streamReader.ToArray();
            
            _tozAwaImage = Convert.ToBase64String(result);
            _tozAwaImage = string.Format("data:image/png;base64,{0}", _tozAwaImage);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            //log error
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(4000); // TODO actual initialization job
            isLoaded = true;
            StateHasChanged();
        }
    }
}