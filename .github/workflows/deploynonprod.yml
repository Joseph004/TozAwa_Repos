name: CI/CD with Terraform

on:
  push:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_NONPROD }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_NONPROD }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: eu-west-1

jobs:
    deploy-infra:
      runs-on: ubuntu-latest
      outputs: 
        SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
      steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: setup Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_wrapper: false
        - name: Terraform init
          id: init
          run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=eu-west-1"
          working-directory: Tozawa.Client/Terraform
        - name: Terraform Plan
          id: plan
          run: |-
            terraform plan -refresh-only \
            -var="region=eu-west-1" \
            -var="public_key=$PUBLIC_SSH_KEY" \
            -var="private_key=$PRIVATE_SSH_KEY" \
            -var="key_name=deployer-key" \
            -out=PLAN
          working-directory: Tozawa.Client/Terraform
        - name: Terraform Apply
          id: apply
          run: terraform apply -refresh-only PLAN
          working-directory: Tozawa.Client/Terraform
        - name: Set output
          id: set-ip
          run: |-
            echo "instance_public_ip=$(terraform output instance_public_ip)" >> "$GITHUB_OUTPUT"
          working-directory: Tozawa.Client/Terraform
    deploy-app:
      runs-on: ubuntu-latest
      needs: deploy-infra
      steps:
        - env:
            TEST1: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
          run: echo "$TEST1"
        - name: Checkout
          uses: actions/checkout@v3
        - name: Set IP env variable
          run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> "$GITHUB_ENV"
        - name: Login to AWS ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
        - name: Build, push docker image
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: tozawa-repos
            IMAGE_TAG: ${{ github.sha }}
          run: |-
            docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . --no-cache
            docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker images
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          working-directory: Tozawa.Client
        - name: Deploy docker iamge to EC2
          env: 
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: tozawa-repos
            IMAGE_TAG: ${{ github.sha }}
            AWS_DEFAULT_REGION: eu-west-1
          uses: appleboy/ssh-action@master
          with:
            host: ${{ env.SERVER_PUBLIC_IP }}
            username: ubuntu
            key: ${{ env.PRIVATE_SSH_KEY }}
            envs: PRIVATE_SSH_KEY,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION,SERVER_PUBLIC_IP
            script: |-
              sudo apt-get update
              sudo apt-get install docker.io -y
              sudo apt-get install awscli -y
              sudo $(aws ecr get-login --no-include-email --region eu-west-1) 2>/dev/null
              sudo chmod 666 /var/run/docker.sock
              sudo docker ps -q --filter "status=exited" | xargs --no-run-if-empty docker rm
              sudo docker volume ls -qf dangling=true | xargs -r docker volume rm
              sudo docker image prune -a -f
              sudo docker system prune -f
              sudo docker system prune -a -f --volumes 
              sudo docker builder prune -a -f
              sudo docker images -a -q | % { docker image rm $_ -f }
              sudo docker ps -a
              sudo docker ps -q --filter "name=tznonprodcontainer" | grep -q . && sudo docker stop tznonprodcontainer && sudo docker rm -fv tznonprodcontainer
              sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
              sudo docker images
              sudo add-apt-repository universe
              sudo apt-get install apt-transport-https
              sudo apt-get update
              sudo apt-get install dotnet-sdk-6.0
              sudo docker run -p 80:8080 --name tznonprodcontainer $REGISTRY/$REPOSITORY:$IMAGE_TAG