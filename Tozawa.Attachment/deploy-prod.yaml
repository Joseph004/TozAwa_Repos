steps:
-   task: AzureKeyVault@2
    displayName: 'key vault: download secrets'
    inputs:
        ConnectedServiceName: 'CAB Automotive Tozawa Prod'
        keyVaultName: '$(KeyVault.Name)'
        secretsFilter: '*'
-   task: AzurePowerShell@5
    condition: and(succeeded(), contains(variables['App.Svc.ApiKey'], '$'))
    displayName: 'create svc api key'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        ScriptPath: '$(ARM.DropPath)/setsvcapiKey.ps1'
        azurePowerShellVersion: LatestVersion
-   task: AzurePowerShell@5
    displayName: 'settings: get application insights connectionstring'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        ScriptPath: '$(ARM.DropPath)/get-application-insights-connectionstring.ps1'
        azurePowerShellVersion: LatestVersion
-   task: AzureResourceGroupDeployment@2
    condition: and(succeeded(), eq(variables.hasStorageArm, 'true'))
    displayName: 'infrastructure: storage'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        resourceGroupName: '$(ARM.ResourceGroup.Storage)'
        location: '$(ARM.Location)'
        csmFile: '$(ARM.Template.Storage)'
        csmParametersFile: '$(ARM.TemplateParameters.Storage)'
-   task: AzureResourceGroupDeployment@2
    displayName: 'infrastructure: resources'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        resourceGroupName: '$(ARM.ResourceGroup)'
        location: '$(ARM.Location)'
        csmFile: '$(ARM.Template)'
        csmParametersFile: '$(ARM.TemplateParameters)'
-   task: AzurePowerShell@3
    condition: and(succeeded(), eq(variables.hasServiceBus, 'true'))
    displayName: 'retrieve servicebus connectionstring'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        ScriptPath: '$(ARM.DropPath)/getservicebusconnectionstring.ps1'
        azurePowerShellVersion: LatestVersion
-   task: AzurePowerShell@3
    condition: and(succeeded(), eq(variables.hasStorageAccount, 'true'))
    displayName: 'retrieve storage key'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        ScriptPath: '$(ARM.DropPath)/getstorageaccountkey.ps1'
        azurePowerShellVersion: LatestVersion
-   task: AzurePowerShell@3
    condition: and(succeeded(), eq(variables.hasSqlServer, 'true'))
    displayName: 'create database user'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        ScriptPath: '$(ARM.DropPath)/addsqluser.ps1'
        azurePowerShellVersion: LatestVersion
-   task: AzureKeyVault@2
    displayName: 'key vault: download sql credentials (will be skipped if already downloaded)'
    condition: and(succeeded(), eq(variables.hasStorageAccount, 'true'), contains(variables['Sql.Password.Vault'], '$'))
    inputs:
        ConnectedServiceName: 'CAB Automotive Tozawa Prod'
        keyVaultName: '$(KeyVault.Name)'
        secretsFilter: '*'
-   task: FileTransform@1
    condition: and(succeeded(), eq(variables.isOnlySvc, 'false'))
    displayName: 'client: file transform'
    inputs:
        folderPath: '$(App.Client.Zip)'
        fileType: json
        targetFiles: '**/appsettings.json'
-   task: AzureRmWebAppDeployment@4
    condition: and(succeeded(), eq(variables.isOnlySvc, 'false'))
    displayName: 'client: deploy'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        WebAppName: '$(App.Client.Name)'
        packageForLinux: '$(App.Client.Zip)'
        enableCustomDeployment: true
        DeploymentType: zipDeploy
-   task: FileTransform@1
    condition: and(succeeded(), eq(variables.isOnlySvc, 'false'))
    displayName: 'bff: file fransform'
    inputs:
        folderPath: '$(App.Bff.Zip)'
        fileType: json
        targetFiles: '**/appsettings.json'
-   task: AzureRmWebAppDeployment@4
    condition: and(succeeded(), eq(variables.isOnlySvc, 'false'))
    displayName: 'bff: deploy'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        WebAppName: '$(App.Bff.Name)'
        packageForLinux: '$(App.Bff.Zip)'
        enableCustomDeployment: true
        DeploymentType: zipDeploy

-   task: FileTransform@1
    displayName: 'svc: file fransform'
    inputs:
        folderPath: '$(App.Svc.Zip)'
        fileType: json
        targetFiles: '**/appsettings.json'
-   task: AzureRmWebAppDeployment@4
    displayName: 'svc: deploy'
    inputs:
        azureSubscription: 'CAB Automotive Tozawa Prod'
        WebAppName: '$(App.Svc.Name)'
        packageForLinux: '$(App.Svc.Zip)'
        enableCustomDeployment: true
        DeploymentType: zipDeploy